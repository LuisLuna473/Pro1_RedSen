
Slave2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b29  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000846  00000000  00000000  00000ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ce  00000000  00000000  0000173f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e9  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e5  00000000  00000000  000022e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000026ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  88:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Slave_Init>:
	}
}

//Función para inicializar I2C esclavo
void I2C_Slave_Init(uint8_t address){
	DDRC &= ~((1<<DDC4)|(1<<DDC5));
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
	
	TWAR = address << 1 & 0b11111110; //Se asigna la dirección que tendra
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//TWAR = (address << 1| 0x01); //Se asigna la dirección que tendra y habilita
	
	//Se habilita la interfaz, ACK automatico, se habilita la ISR
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  a0:	85 e4       	ldi	r24, 0x45	; 69
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <init_ultrasonic>:

volatile uint16_t ultrasonico = 0;

void init_ultrasonic(void)
{
	cli(); // Deshabilitar interrupciones globales
  a8:	f8 94       	cli

	// Configurar TRIG como salida
	DDRD |= (1 << TRIG);
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	8a b9       	out	0x0a, r24	; 10
	
	// Configurar ECHO como entrada
	DDRD &= ~(1 << ECHO);
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	8a b9       	out	0x0a, r24	; 10
	
	// Configurar BUZZER como salida
	DDRD |= (1 << BUZZER);
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	8a b9       	out	0x0a, r24	; 10
	
	// Asegurarse de que el buzzer esté apagado inicialmente
	PORTD &= ~(1 << BUZZER);
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8f 7e       	andi	r24, 0xEF	; 239
  c0:	8b b9       	out	0x0b, r24	; 11

	// Inicialización del I2C
	I2C_Slave_Init(SlaveAddress);
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Slave_Init>
	
	sei(); // Habilitar interrupciones globales
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <read_distance>:

uint16_t read_distance(void) {
	uint16_t count = 0;
	
	// Enviar un pulso de 10us en el pin TRIG
	PORTD &= ~(1 << TRIG);
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	87 7f       	andi	r24, 0xF7	; 247
  d0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8a e0       	ldi	r24, 0x0A	; 10
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <read_distance+0x8>
  d8:	00 c0       	rjmp	.+0      	; 0xda <read_distance+0xe>
	_delay_us(2);
	PORTD |= (1 << TRIG);
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	85 e3       	ldi	r24, 0x35	; 53
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <read_distance+0x16>
  e6:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1 << TRIG);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	87 7f       	andi	r24, 0xF7	; 247
  ec:	8b b9       	out	0x0b, r24	; 11

	// Esperar a que el pin ECHO se ponga en alto
	while (!(PIND & (1 << ECHO)));
  ee:	4a 9b       	sbis	0x09, 2	; 9
  f0:	fe cf       	rjmp	.-4      	; 0xee <read_distance+0x22>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	06 c0       	rjmp	.+12     	; 0x104 <read_distance+0x38>

	// Contar el tiempo que el pin ECHO se mantiene en alto
	while (PIND & (1 << ECHO)) {
		count++;
  f8:	2f 5f       	subi	r18, 0xFF	; 255
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <read_distance+0x32>
 102:	00 00       	nop

	// Esperar a que el pin ECHO se ponga en alto
	while (!(PIND & (1 << ECHO)));

	// Contar el tiempo que el pin ECHO se mantiene en alto
	while (PIND & (1 << ECHO)) {
 104:	4a 99       	sbic	0x09, 2	; 9
 106:	f8 cf       	rjmp	.-16     	; 0xf8 <read_distance+0x2c>
		count++;
		_delay_us(1);
	}

	// Convertir el tiempo a distancia en cm
	return (count / 58);
 108:	af e9       	ldi	r26, 0x9F	; 159
 10a:	b6 e4       	ldi	r27, 0x46	; 70
 10c:	0e 94 25 01 	call	0x24a	; 0x24a <__umulhisi3>
}
 110:	92 95       	swap	r25
 112:	82 95       	swap	r24
 114:	8f 70       	andi	r24, 0x0F	; 15
 116:	89 27       	eor	r24, r25
 118:	9f 70       	andi	r25, 0x0F	; 15
 11a:	89 27       	eor	r24, r25
 11c:	08 95       	ret

0000011e <main>:

int main(void) {
	init_ultrasonic();
 11e:	0e 94 54 00 	call	0xa8	; 0xa8 <init_ultrasonic>

	while (1) {
		ultrasonico = read_distance();
 122:	0e 94 66 00 	call	0xcc	; 0xcc <read_distance>
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

		if (ultrasonico < 10) {  // Si el objeto está a menos de 10 cm
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	0a 97       	sbiw	r24, 0x0a	; 10
 138:	28 f5       	brcc	.+74     	; 0x184 <main+0x66>
			PORTD |= (1 << BUZZER);  // Encender el buzzer
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f e7       	ldi	r18, 0x7F	; 127
 142:	85 eb       	ldi	r24, 0xB5	; 181
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x28>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x32>
 150:	00 00       	nop
			_delay_ms(35);
			PORTD &= ~(1 << BUZZER);  // Apagar el buzzer
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	8f 7e       	andi	r24, 0xEF	; 239
 156:	8b b9       	out	0x0b, r24	; 11
 158:	2f e7       	ldi	r18, 0x7F	; 127
 15a:	85 eb       	ldi	r24, 0xB5	; 181
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x40>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x4a>
 168:	00 00       	nop
			_delay_ms(35);
			PORTD &= ~(1 << BUZZER);
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	2f e7       	ldi	r18, 0x7F	; 127
 172:	85 eb       	ldi	r24, 0xB5	; 181
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x58>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x62>
 180:	00 00       	nop
 182:	0c c0       	rjmp	.+24     	; 0x19c <main+0x7e>
			_delay_ms(35);
			} else {
			PORTD &= ~(1 << BUZZER);  // Apagar el buzzer
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 7e       	andi	r24, 0xEF	; 239
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	2f e7       	ldi	r18, 0x7F	; 127
 18c:	85 eb       	ldi	r24, 0xB5	; 181
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x72>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x7c>
 19a:	00 00       	nop
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	83 ec       	ldi	r24, 0xC3	; 195
 1a0:	99 e0       	ldi	r25, 0x09	; 9
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0x84>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x8e>
 1ac:	00 00       	nop
 1ae:	b9 cf       	rjmp	.-142    	; 0x122 <main+0x4>

000001b0 <__vector_24>:
	}
}


ISR(TWI_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	uint8_t estado = TWSR & 0xF8;
 1c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1c6:	88 7f       	andi	r24, 0xF8	; 248
	switch (estado) {
 1c8:	80 39       	cpi	r24, 0x90	; 144
 1ca:	c9 f0       	breq	.+50     	; 0x1fe <__vector_24+0x4e>
 1cc:	38 f4       	brcc	.+14     	; 0x1dc <__vector_24+0x2c>
 1ce:	80 37       	cpi	r24, 0x70	; 112
 1d0:	81 f0       	breq	.+32     	; 0x1f2 <__vector_24+0x42>
 1d2:	80 38       	cpi	r24, 0x80	; 128
 1d4:	a1 f0       	breq	.+40     	; 0x1fe <__vector_24+0x4e>
 1d6:	80 36       	cpi	r24, 0x60	; 96
 1d8:	51 f5       	brne	.+84     	; 0x22e <__vector_24+0x7e>
 1da:	0b c0       	rjmp	.+22     	; 0x1f2 <__vector_24+0x42>
 1dc:	88 3b       	cpi	r24, 0xB8	; 184
 1de:	a9 f0       	breq	.+42     	; 0x20a <__vector_24+0x5a>
 1e0:	18 f4       	brcc	.+6      	; 0x1e8 <__vector_24+0x38>
 1e2:	88 3a       	cpi	r24, 0xA8	; 168
 1e4:	91 f0       	breq	.+36     	; 0x20a <__vector_24+0x5a>
 1e6:	23 c0       	rjmp	.+70     	; 0x22e <__vector_24+0x7e>
 1e8:	80 3c       	cpi	r24, 0xC0	; 192
 1ea:	d9 f0       	breq	.+54     	; 0x222 <__vector_24+0x72>
 1ec:	88 3c       	cpi	r24, 0xC8	; 200
 1ee:	c9 f0       	breq	.+50     	; 0x222 <__vector_24+0x72>
 1f0:	1e c0       	rjmp	.+60     	; 0x22e <__vector_24+0x7e>
		case 0x60:  // SLA+W recibido, ACK enviado
		case 0x70:  // Dirección de transmisión general recibida, ACK enviado
		TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para recibir más datos
 1f2:	ec eb       	ldi	r30, 0xBC	; 188
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 6c       	ori	r24, 0xC0	; 192
 1fa:	80 83       	st	Z, r24
		break;
 1fc:	1d c0       	rjmp	.+58     	; 0x238 <__vector_24+0x88>
		case 0x80:  // Dato recibido, ACK enviado
		case 0x90:  // Dato recibido en modo transmisión general, ACK enviado
		TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para recibir más datos
 1fe:	ec eb       	ldi	r30, 0xBC	; 188
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 6c       	ori	r24, 0xC0	; 192
 206:	80 83       	st	Z, r24
		break;
 208:	17 c0       	rjmp	.+46     	; 0x238 <__vector_24+0x88>
		case 0xA8:  // SLA+R recibido, ACK enviado
		case 0xB8:  // Dato transmitido, ACK recibido
		TWDR = ultrasonico;  // Enviar valor del contador
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 212:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para la siguiente transmisión
 216:	ec eb       	ldi	r30, 0xBC	; 188
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	80 6c       	ori	r24, 0xC0	; 192
 21e:	80 83       	st	Z, r24
		break;
 220:	0b c0       	rjmp	.+22     	; 0x238 <__vector_24+0x88>
		case 0xC0:  // Dato transmitido, NACK recibido
		case 0xC8:  // Último dato transmitido, ACK recibido
		TWCR |= (1<<TWINT) | (1<<TWEA);  // Preparar para la próxima recepción
 222:	ec eb       	ldi	r30, 0xBC	; 188
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 6c       	ori	r24, 0xC0	; 192
 22a:	80 83       	st	Z, r24
		break;
 22c:	05 c0       	rjmp	.+10     	; 0x238 <__vector_24+0x88>
		default:  // Se libera el bus de cualquier error
		TWCR |= (1<<TWINT) | (1<<TWSTO);
 22e:	ec eb       	ldi	r30, 0xBC	; 188
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 69       	ori	r24, 0x90	; 144
 236:	80 83       	st	Z, r24
	}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__umulhisi3>:
 24a:	a2 9f       	mul	r26, r18
 24c:	b0 01       	movw	r22, r0
 24e:	b3 9f       	mul	r27, r19
 250:	c0 01       	movw	r24, r0
 252:	a3 9f       	mul	r26, r19
 254:	70 0d       	add	r23, r0
 256:	81 1d       	adc	r24, r1
 258:	11 24       	eor	r1, r1
 25a:	91 1d       	adc	r25, r1
 25c:	b2 9f       	mul	r27, r18
 25e:	70 0d       	add	r23, r0
 260:	81 1d       	adc	r24, r1
 262:	11 24       	eor	r1, r1
 264:	91 1d       	adc	r25, r1
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
