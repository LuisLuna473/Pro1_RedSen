
PruebasMasPro1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000010c4  00001158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  00800116  00800116  0000116e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000116e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e0  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a55  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001043  00000000  00000000  000034c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00004504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000797  00000000  00000000  0000480c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b28  00000000  00000000  00004fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005acb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	23 04       	cpc	r2, r3
      6a:	29 04       	cpc	r2, r9
      6c:	2f 04       	cpc	r2, r15
      6e:	35 04       	cpc	r3, r5
      70:	3b 04       	cpc	r3, r11
      72:	46 04       	cpc	r4, r6
      74:	51 04       	cpc	r5, r1
      76:	5c 04       	cpc	r5, r12
      78:	67 04       	cpc	r6, r7
      7a:	72 04       	cpc	r7, r2

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 ec       	ldi	r30, 0xC4	; 196
      90:	f0 e1       	ldi	r31, 0x10	; 16
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 31       	cpi	r26, 0x16	; 22
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a6 e1       	ldi	r26, 0x16	; 22
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	af 3a       	cpi	r26, 0xAF	; 175
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 3d 03 	call	0x67a	; 0x67a <main>
      b2:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <I2C_Master_Init>:
		*buffer = TWDR; // Lee el dato recibido
		return 0; // Recepción exitosa
		} else {
		return estado; // Retorna el código de error
	}
}
      ba:	cf 93       	push	r28
      bc:	c6 2f       	mov	r28, r22
      be:	27 b1       	in	r18, 0x07	; 7
      c0:	2f 7c       	andi	r18, 0xCF	; 207
      c2:	27 b9       	out	0x07, r18	; 7
      c4:	64 30       	cpi	r22, 0x04	; 4
      c6:	79 f0       	breq	.+30     	; 0xe6 <I2C_Master_Init+0x2c>
      c8:	18 f4       	brcc	.+6      	; 0xd0 <I2C_Master_Init+0x16>
      ca:	61 30       	cpi	r22, 0x01	; 1
      cc:	31 f0       	breq	.+12     	; 0xda <I2C_Master_Init+0x20>
      ce:	23 c0       	rjmp	.+70     	; 0x116 <I2C_Master_Init+0x5c>
      d0:	60 31       	cpi	r22, 0x10	; 16
      d2:	91 f0       	breq	.+36     	; 0xf8 <I2C_Master_Init+0x3e>
      d4:	60 34       	cpi	r22, 0x40	; 64
      d6:	c9 f0       	breq	.+50     	; 0x10a <I2C_Master_Init+0x50>
      d8:	1e c0       	rjmp	.+60     	; 0x116 <I2C_Master_Init+0x5c>
      da:	e9 eb       	ldi	r30, 0xB9	; 185
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	20 81       	ld	r18, Z
      e0:	2c 7f       	andi	r18, 0xFC	; 252
      e2:	20 83       	st	Z, r18
      e4:	1e c0       	rjmp	.+60     	; 0x122 <I2C_Master_Init+0x68>
      e6:	e9 eb       	ldi	r30, 0xB9	; 185
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	20 81       	ld	r18, Z
      ec:	2d 7f       	andi	r18, 0xFD	; 253
      ee:	20 83       	st	Z, r18
      f0:	20 81       	ld	r18, Z
      f2:	21 60       	ori	r18, 0x01	; 1
      f4:	20 83       	st	Z, r18
      f6:	15 c0       	rjmp	.+42     	; 0x122 <I2C_Master_Init+0x68>
      f8:	e9 eb       	ldi	r30, 0xB9	; 185
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	20 81       	ld	r18, Z
      fe:	2e 7f       	andi	r18, 0xFE	; 254
     100:	20 83       	st	Z, r18
     102:	20 81       	ld	r18, Z
     104:	22 60       	ori	r18, 0x02	; 2
     106:	20 83       	st	Z, r18
     108:	0c c0       	rjmp	.+24     	; 0x122 <I2C_Master_Init+0x68>
     10a:	e9 eb       	ldi	r30, 0xB9	; 185
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	20 81       	ld	r18, Z
     110:	23 60       	ori	r18, 0x03	; 3
     112:	20 83       	st	Z, r18
     114:	06 c0       	rjmp	.+12     	; 0x122 <I2C_Master_Init+0x68>
     116:	e9 eb       	ldi	r30, 0xB9	; 185
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	20 81       	ld	r18, Z
     11c:	2c 7f       	andi	r18, 0xFC	; 252
     11e:	20 83       	st	Z, r18
     120:	c1 e0       	ldi	r28, 0x01	; 1
     122:	9c 01       	movw	r18, r24
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	50 e0       	ldi	r21, 0x00	; 0
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	74 e2       	ldi	r23, 0x24	; 36
     12c:	84 ef       	ldi	r24, 0xF4	; 244
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divmodsi4>
     134:	ca 01       	movw	r24, r20
     136:	b9 01       	movw	r22, r18
     138:	60 51       	subi	r22, 0x10	; 16
     13a:	71 09       	sbc	r23, r1
     13c:	81 09       	sbc	r24, r1
     13e:	91 09       	sbc	r25, r1
     140:	2c 2f       	mov	r18, r28
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	22 0f       	add	r18, r18
     146:	33 1f       	adc	r19, r19
     148:	03 2e       	mov	r0, r19
     14a:	00 0c       	add	r0, r0
     14c:	44 0b       	sbc	r20, r20
     14e:	55 0b       	sbc	r21, r21
     150:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divmodsi4>
     154:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     158:	ec eb       	ldi	r30, 0xBC	; 188
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	84 60       	ori	r24, 0x04	; 4
     160:	80 83       	st	Z, r24
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <I2C_Master_Start>:
     166:	84 ea       	ldi	r24, 0xA4	; 164
     168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     16c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     170:	88 23       	and	r24, r24
     172:	e4 f7       	brge	.-8      	; 0x16c <I2C_Master_Start+0x6>
     174:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	08 95       	ret

0000017c <I2C_Master_Stop>:
     17c:	84 e9       	ldi	r24, 0x94	; 148
     17e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     182:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     186:	84 fd       	sbrc	r24, 4
     188:	fc cf       	rjmp	.-8      	; 0x182 <I2C_Master_Stop+0x6>
     18a:	08 95       	ret

0000018c <I2C_Master_Write>:
     18c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     196:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     19a:	88 23       	and	r24, r24
     19c:	e4 f7       	brge	.-8      	; 0x196 <I2C_Master_Write+0xa>
     19e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1a2:	88 7f       	andi	r24, 0xF8	; 248
     1a4:	88 31       	cpi	r24, 0x18	; 24
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <I2C_Master_Write+0x28>
     1a8:	88 32       	cpi	r24, 0x28	; 40
     1aa:	31 f0       	breq	.+12     	; 0x1b8 <I2C_Master_Write+0x2c>
     1ac:	80 34       	cpi	r24, 0x40	; 64
     1ae:	29 f4       	brne	.+10     	; 0x1ba <I2C_Master_Write+0x2e>
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	08 95       	ret
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	08 95       	ret
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	08 95       	ret

000001bc <I2C_Master_Read>:
     1bc:	dc 01       	movw	r26, r24
     1be:	66 23       	and	r22, r22
     1c0:	31 f0       	breq	.+12     	; 0x1ce <I2C_Master_Read+0x12>
     1c2:	ec eb       	ldi	r30, 0xBC	; 188
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	90 81       	ld	r25, Z
     1c8:	90 64       	ori	r25, 0x40	; 64
     1ca:	90 83       	st	Z, r25
     1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <I2C_Master_Read+0x1c>
     1ce:	ec eb       	ldi	r30, 0xBC	; 188
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	90 81       	ld	r25, Z
     1d4:	9f 7b       	andi	r25, 0xBF	; 191
     1d6:	90 83       	st	Z, r25
     1d8:	ec eb       	ldi	r30, 0xBC	; 188
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	90 81       	ld	r25, Z
     1de:	90 68       	ori	r25, 0x80	; 128
     1e0:	90 83       	st	Z, r25
     1e2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1e6:	99 23       	and	r25, r25
     1e8:	e4 f7       	brge	.-8      	; 0x1e2 <I2C_Master_Read+0x26>
     1ea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1ee:	98 7f       	andi	r25, 0xF8	; 248
     1f0:	98 35       	cpi	r25, 0x58	; 88
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <I2C_Master_Read+0x3c>
     1f4:	90 35       	cpi	r25, 0x50	; 80
     1f6:	29 f4       	brne	.+10     	; 0x202 <I2C_Master_Read+0x46>
     1f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1fc:	8c 93       	st	X, r24
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	08 95       	ret
     202:	89 2f       	mov	r24, r25
     204:	08 95       	ret

00000206 <I2C_read_data_16bits>:

// Funcion para leer un valor de 16 bits de datos desde el esclavo para el maestro.
uint16_t I2C_read_data_16bits(uint8_t direccion_esclavo, uint16_t *dato){
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
	// Iniciar condicion de START
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
     20a:	94 ea       	ldi	r25, 0xA4	; 164
     20c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete
     210:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     214:	99 23       	and	r25, r25
     216:	e4 f7       	brge	.-8      	; 0x210 <I2C_read_data_16bits+0xa>
	
	// Verifica la condicion de start
	if ((TWSR & 0xF8) != TW_START)
     218:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     21c:	98 7f       	andi	r25, 0xF8	; 248
     21e:	98 30       	cpi	r25, 0x08	; 8
     220:	09 f0       	breq	.+2      	; 0x224 <I2C_read_data_16bits+0x1e>
     222:	5e c0       	rjmp	.+188    	; 0x2e0 <I2C_read_data_16bits+0xda>
	{
		return 1;	// No se pudo iniciar la condicion de start
	}
	
	// Enviar direccion del esclavo con bit de lectura
	TWDR = SLA_R(direccion_esclavo);
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	81 60       	ori	r24, 0x01	; 1
     22c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);
     230:	84 e8       	ldi	r24, 0x84	; 132
     232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Espera a que se complete la transmision
     236:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     23a:	88 23       	and	r24, r24
     23c:	e4 f7       	brge	.-8      	; 0x236 <I2C_read_data_16bits+0x30>
     23e:	eb 01       	movw	r28, r22
	
	// Verifica ACK/NACK de la direccion
	if ((TWSR & 0xF8) == TW_MR_SLA_NACK)
     240:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     244:	88 7f       	andi	r24, 0xF8	; 248
     246:	88 34       	cpi	r24, 0x48	; 72
     248:	29 f4       	brne	.+10     	; 0x254 <I2C_read_data_16bits+0x4e>
	{
		I2C_Master_Stop();	// Detiene la transmision si es un NACK
     24a:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
		return 1;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	48 c0       	rjmp	.+144    	; 0x2e4 <I2C_read_data_16bits+0xde>
	} else if ((TWSR & 0xF8) != TW_MR_SLA_ACK)
     254:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     258:	88 7f       	andi	r24, 0xF8	; 248
     25a:	80 34       	cpi	r24, 0x40	; 64
     25c:	29 f0       	breq	.+10     	; 0x268 <I2C_read_data_16bits+0x62>
	{
		I2C_Master_Stop();	// Detener si recibe otro dato erroneo
     25e:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
		return 1;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	3e c0       	rjmp	.+124    	; 0x2e4 <I2C_read_data_16bits+0xde>
	}
	
	// Lee el byte alto del Slave
	TWCR = (1<<TWEN)|(1<<TWINT);
     268:	84 e8       	ldi	r24, 0x84	; 132
     26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete la recepcion
     26e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     272:	88 23       	and	r24, r24
     274:	e4 f7       	brge	.-8      	; 0x26e <I2C_read_data_16bits+0x68>
	
	// Verifica la recepcion
	if ((TWSR & 0xF8) != TW_MR_DATA_NACK && (TWSR & 0xF8) != TW_MR_DATA_ACK)
     276:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     27a:	88 7f       	andi	r24, 0xF8	; 248
     27c:	88 35       	cpi	r24, 0x58	; 88
     27e:	51 f0       	breq	.+20     	; 0x294 <I2C_read_data_16bits+0x8e>
     280:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     284:	88 7f       	andi	r24, 0xF8	; 248
     286:	80 35       	cpi	r24, 0x50	; 80
     288:	29 f0       	breq	.+10     	; 0x294 <I2C_read_data_16bits+0x8e>
	{
		I2C_Master_Stop();	// Detener la recepcion
     28a:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
		return 1;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	28 c0       	rjmp	.+80     	; 0x2e4 <I2C_read_data_16bits+0xde>
	}
	
	// Lee dato recibido (byte alto)
	uint8_t byte_alto = TWDR;
     294:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	
	// Lee el byte bajo del Slave
	TWCR = (1<<TWEN)|(1<<TWINT);
     298:	84 e8       	ldi	r24, 0x84	; 132
     29a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete la recepcion
     29e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2a2:	88 23       	and	r24, r24
     2a4:	e4 f7       	brge	.-8      	; 0x29e <I2C_read_data_16bits+0x98>
	
	// Verifica la recepcion
	if ((TWSR & 0xF8) != TW_MR_DATA_NACK && (TWSR & 0xF8) != TW_MR_DATA_ACK)
     2a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2aa:	88 7f       	andi	r24, 0xF8	; 248
     2ac:	88 35       	cpi	r24, 0x58	; 88
     2ae:	51 f0       	breq	.+20     	; 0x2c4 <I2C_read_data_16bits+0xbe>
     2b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     2b4:	88 7f       	andi	r24, 0xF8	; 248
     2b6:	80 35       	cpi	r24, 0x50	; 80
     2b8:	29 f0       	breq	.+10     	; 0x2c4 <I2C_read_data_16bits+0xbe>
	{
		I2C_Master_Stop();	// Detener la recepcion
     2ba:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
		return 1;
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	10 c0       	rjmp	.+32     	; 0x2e4 <I2C_read_data_16bits+0xde>
	}
	
	// Lee dato recibido (byte bajo)
	uint8_t byte_bajo = TWDR;
     2c4:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	
	// Combina los bytes para formar un valor de 16 bits
	*dato = (uint16_t)byte_alto << 8 | byte_bajo;
     2c8:	89 2f       	mov	r24, r25
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	98 2f       	mov	r25, r24
     2ce:	88 27       	eor	r24, r24
     2d0:	82 2b       	or	r24, r18
     2d2:	99 83       	std	Y+1, r25	; 0x01
     2d4:	88 83       	st	Y, r24
	
	I2C_Master_Stop();
     2d6:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
	
	return *dato;
     2da:	88 81       	ld	r24, Y
     2dc:	99 81       	ldd	r25, Y+1	; 0x01
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <I2C_read_data_16bits+0xde>
	while(!(TWCR & (1<<TWINT)));	// Esperar a que se complete
	
	// Verifica la condicion de start
	if ((TWSR & 0xF8) != TW_START)
	{
		return 1;	// No se pudo iniciar la condicion de start
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
	*dato = (uint16_t)byte_alto << 8 | byte_bajo;
	
	I2C_Master_Stop();
	
	return *dato;
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <LCD_Port>:
}

//Función para desplazar a la izquierda
void LCD_Shift_Left(void){
	LCD_CMD(0x01);
	LCD_CMD(0x08);
     2ea:	80 ff       	sbrs	r24, 0
     2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <LCD_Port+0xc>
     2ee:	9b b1       	in	r25, 0x0b	; 11
     2f0:	90 61       	ori	r25, 0x10	; 16
     2f2:	9b b9       	out	0x0b, r25	; 11
     2f4:	03 c0       	rjmp	.+6      	; 0x2fc <LCD_Port+0x12>
     2f6:	9b b1       	in	r25, 0x0b	; 11
     2f8:	9f 7e       	andi	r25, 0xEF	; 239
     2fa:	9b b9       	out	0x0b, r25	; 11
     2fc:	81 ff       	sbrs	r24, 1
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <LCD_Port+0x1e>
     300:	9b b1       	in	r25, 0x0b	; 11
     302:	90 62       	ori	r25, 0x20	; 32
     304:	9b b9       	out	0x0b, r25	; 11
     306:	03 c0       	rjmp	.+6      	; 0x30e <LCD_Port+0x24>
     308:	9b b1       	in	r25, 0x0b	; 11
     30a:	9f 7d       	andi	r25, 0xDF	; 223
     30c:	9b b9       	out	0x0b, r25	; 11
     30e:	82 ff       	sbrs	r24, 2
     310:	04 c0       	rjmp	.+8      	; 0x31a <LCD_Port+0x30>
     312:	9b b1       	in	r25, 0x0b	; 11
     314:	90 64       	ori	r25, 0x40	; 64
     316:	9b b9       	out	0x0b, r25	; 11
     318:	03 c0       	rjmp	.+6      	; 0x320 <LCD_Port+0x36>
     31a:	9b b1       	in	r25, 0x0b	; 11
     31c:	9f 7b       	andi	r25, 0xBF	; 191
     31e:	9b b9       	out	0x0b, r25	; 11
     320:	83 ff       	sbrs	r24, 3
     322:	04 c0       	rjmp	.+8      	; 0x32c <LCD_Port+0x42>
     324:	8b b1       	in	r24, 0x0b	; 11
     326:	80 68       	ori	r24, 0x80	; 128
     328:	8b b9       	out	0x0b, r24	; 11
     32a:	08 95       	ret
     32c:	8b b1       	in	r24, 0x0b	; 11
     32e:	8f 77       	andi	r24, 0x7F	; 127
     330:	8b b9       	out	0x0b, r24	; 11
     332:	08 95       	ret

00000334 <LCD_CMD>:
     334:	98 b1       	in	r25, 0x08	; 8
     336:	9e 7f       	andi	r25, 0xFE	; 254
     338:	98 b9       	out	0x08, r25	; 8
     33a:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_Port>
     33e:	88 b1       	in	r24, 0x08	; 8
     340:	82 60       	ori	r24, 0x02	; 2
     342:	88 b9       	out	0x08, r24	; 8
     344:	8f e7       	ldi	r24, 0x7F	; 127
     346:	9e e3       	ldi	r25, 0x3E	; 62
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_CMD+0x14>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_CMD+0x1a>
     34e:	00 00       	nop
     350:	88 b1       	in	r24, 0x08	; 8
     352:	8d 7f       	andi	r24, 0xFD	; 253
     354:	88 b9       	out	0x08, r24	; 8
     356:	08 95       	ret

00000358 <initLCD4bits>:
     358:	8a b1       	in	r24, 0x0a	; 10
     35a:	80 6f       	ori	r24, 0xF0	; 240
     35c:	8a b9       	out	0x0a, r24	; 10
     35e:	87 b1       	in	r24, 0x07	; 7
     360:	83 60       	ori	r24, 0x03	; 3
     362:	87 b9       	out	0x07, r24	; 7
     364:	1b b8       	out	0x0b, r1	; 11
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_Port>
     36c:	2f ef       	ldi	r18, 0xFF	; 255
     36e:	89 ef       	ldi	r24, 0xF9	; 249
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	21 50       	subi	r18, 0x01	; 1
     374:	80 40       	sbci	r24, 0x00	; 0
     376:	90 40       	sbci	r25, 0x00	; 0
     378:	e1 f7       	brne	.-8      	; 0x372 <initLCD4bits+0x1a>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <initLCD4bits+0x24>
     37c:	00 00       	nop
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     384:	8f e1       	ldi	r24, 0x1F	; 31
     386:	9e e4       	ldi	r25, 0x4E	; 78
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	f1 f7       	brne	.-4      	; 0x388 <initLCD4bits+0x30>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <initLCD4bits+0x36>
     38e:	00 00       	nop
     390:	83 e0       	ldi	r24, 0x03	; 3
     392:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     396:	8f ed       	ldi	r24, 0xDF	; 223
     398:	9b ea       	ldi	r25, 0xAB	; 171
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <initLCD4bits+0x42>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <initLCD4bits+0x48>
     3a0:	00 00       	nop
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     3b4:	88 e0       	ldi	r24, 0x08	; 8
     3b6:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     3c0:	8c e0       	ldi	r24, 0x0C	; 12
     3c2:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     3cc:	86 e0       	ldi	r24, 0x06	; 6
     3ce:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     3de:	08 95       	ret

000003e0 <LCD_Write_Char>:
     3e0:	cf 93       	push	r28
     3e2:	c8 2f       	mov	r28, r24
     3e4:	cf 70       	andi	r28, 0x0F	; 15
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	98 b9       	out	0x08, r25	; 8
     3ea:	82 95       	swap	r24
     3ec:	8f 70       	andi	r24, 0x0F	; 15
     3ee:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_Port>
     3f2:	88 b1       	in	r24, 0x08	; 8
     3f4:	82 60       	ori	r24, 0x02	; 2
     3f6:	88 b9       	out	0x08, r24	; 8
     3f8:	8f e7       	ldi	r24, 0x7F	; 127
     3fa:	9e e3       	ldi	r25, 0x3E	; 62
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_Write_Char+0x1c>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	88 b1       	in	r24, 0x08	; 8
     406:	8d 7f       	andi	r24, 0xFD	; 253
     408:	88 b9       	out	0x08, r24	; 8
     40a:	8c 2f       	mov	r24, r28
     40c:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_Port>
     410:	88 b1       	in	r24, 0x08	; 8
     412:	82 60       	ori	r24, 0x02	; 2
     414:	88 b9       	out	0x08, r24	; 8
     416:	8f e7       	ldi	r24, 0x7F	; 127
     418:	9e e3       	ldi	r25, 0x3E	; 62
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     420:	00 00       	nop
     422:	88 b1       	in	r24, 0x08	; 8
     424:	8d 7f       	andi	r24, 0xFD	; 253
     426:	88 b9       	out	0x08, r24	; 8
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <LCD_Write_String>:
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24
     436:	c0 e0       	ldi	r28, 0x00	; 0
     438:	d0 e0       	ldi	r29, 0x00	; 0
     43a:	03 c0       	rjmp	.+6      	; 0x442 <LCD_Write_String+0x16>
     43c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <LCD_Write_Char>
     440:	21 96       	adiw	r28, 0x01	; 1
     442:	f8 01       	movw	r30, r16
     444:	ec 0f       	add	r30, r28
     446:	fd 1f       	adc	r31, r29
     448:	80 81       	ld	r24, Z
     44a:	81 11       	cpse	r24, r1
     44c:	f7 cf       	rjmp	.-18     	; 0x43c <LCD_Write_String+0x10>
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <LCD_Set_Cursor>:
}

//Función para establecer el cursor
void LCD_Set_Cursor(char c, char f){ //f de fila y c de columna
     458:	cf 93       	push	r28
	char temp, z, y;
	if (f == 1){
     45a:	61 30       	cpi	r22, 0x01	; 1
     45c:	59 f4       	brne	.+22     	; 0x474 <LCD_Set_Cursor+0x1c>
		temp = 0x80 + c - 1;
     45e:	81 58       	subi	r24, 0x81	; 129
		z = temp >> 4;
		y = temp & 0x0F;
     460:	c8 2f       	mov	r28, r24
     462:	cf 70       	andi	r28, 0x0F	; 15
		LCD_CMD(z);
     464:	82 95       	swap	r24
     466:	8f 70       	andi	r24, 0x0F	; 15
     468:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
		LCD_CMD(y);	
     46c:	8c 2f       	mov	r24, r28
     46e:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
     472:	0c c0       	rjmp	.+24     	; 0x48c <LCD_Set_Cursor+0x34>
		}else if (f == 2) {
     474:	62 30       	cpi	r22, 0x02	; 2
     476:	51 f4       	brne	.+20     	; 0x48c <LCD_Set_Cursor+0x34>
		temp = 0xC0 + c - 1;
     478:	81 54       	subi	r24, 0x41	; 65
		z = temp >>4;
		y = temp & 0x0F;
     47a:	c8 2f       	mov	r28, r24
     47c:	cf 70       	andi	r28, 0x0F	; 15
		LCD_CMD(z);
     47e:	82 95       	swap	r24
     480:	8f 70       	andi	r24, 0x0F	; 15
     482:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
		LCD_CMD(y);
     486:	8c 2f       	mov	r24, r28
     488:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_CMD>
	
}
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <Slave1>:
	lista[3] = '\0';
}

uint8_t mapValue(uint8_t value, uint8_t in_min, uint8_t in_max, uint8_t out_min, uint8_t out_max) {
	return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
     490:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Master_Start>
     494:	81 e6       	ldi	r24, 0x61	; 97
     496:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <bufferI2C>
     49a:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_Master_Write>
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	11 f0       	breq	.+4      	; 0x4a6 <Slave1+0x16>
     4a2:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	8a e1       	ldi	r24, 0x1A	; 26
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_Master_Read>
     4b0:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     4b4:	08 95       	ret

000004b6 <setup>:
     4b6:	8a b1       	in	r24, 0x0a	; 10
     4b8:	84 60       	ori	r24, 0x04	; 4
     4ba:	8a b9       	out	0x0a, r24	; 10
     4bc:	8b b1       	in	r24, 0x0b	; 11
     4be:	8b 7f       	andi	r24, 0xFB	; 251
     4c0:	8b b9       	out	0x0b, r24	; 11
     4c2:	87 b1       	in	r24, 0x07	; 7
     4c4:	84 60       	ori	r24, 0x04	; 4
     4c6:	87 b9       	out	0x07, r24	; 7
     4c8:	88 b1       	in	r24, 0x08	; 8
     4ca:	8b 7f       	andi	r24, 0xFB	; 251
     4cc:	88 b9       	out	0x08, r24	; 8
     4ce:	84 b1       	in	r24, 0x04	; 4
     4d0:	81 60       	ori	r24, 0x01	; 1
     4d2:	84 b9       	out	0x04, r24	; 4
     4d4:	85 b1       	in	r24, 0x05	; 5
     4d6:	8e 7f       	andi	r24, 0xFE	; 254
     4d8:	85 b9       	out	0x05, r24	; 5
     4da:	84 b1       	in	r24, 0x04	; 4
     4dc:	88 60       	ori	r24, 0x08	; 8
     4de:	84 b9       	out	0x04, r24	; 4
     4e0:	85 b1       	in	r24, 0x05	; 5
     4e2:	87 7f       	andi	r24, 0xF7	; 247
     4e4:	85 b9       	out	0x05, r24	; 5
     4e6:	84 b1       	in	r24, 0x04	; 4
     4e8:	80 61       	ori	r24, 0x10	; 16
     4ea:	84 b9       	out	0x04, r24	; 4
     4ec:	85 b1       	in	r24, 0x05	; 5
     4ee:	8f 7e       	andi	r24, 0xEF	; 239
     4f0:	85 b9       	out	0x05, r24	; 5
     4f2:	78 94       	sei
     4f4:	08 95       	ret

000004f6 <Esp32_DCLec>:
     4f6:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Master_Start>
     4fa:	81 ea       	ldi	r24, 0xA1	; 161
     4fc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <bufferI2C>
     500:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_Master_Write>
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	19 f0       	breq	.+6      	; 0x50e <Esp32_DCLec+0x18>
     508:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     50c:	08 95       	ret
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	89 e1       	ldi	r24, 0x19	; 25
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_Master_Read>
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	19 f0       	breq	.+6      	; 0x522 <Esp32_DCLec+0x2c>
     51c:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     520:	08 95       	ret
     522:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     526:	08 95       	ret

00000528 <Esp32_ServLec>:
     528:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Master_Start>
     52c:	81 ea       	ldi	r24, 0xA1	; 161
     52e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <bufferI2C>
     532:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_Master_Write>
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	19 f0       	breq	.+6      	; 0x540 <Esp32_ServLec+0x18>
     53a:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     53e:	08 95       	ret
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	88 e1       	ldi	r24, 0x18	; 24
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_Master_Read>
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	19 f0       	breq	.+6      	; 0x554 <Esp32_ServLec+0x2c>
     54e:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     552:	08 95       	ret
     554:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     558:	08 95       	ret

0000055a <Esp32Slave_W>:
     55a:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Master_Start>
     55e:	80 ea       	ldi	r24, 0xA0	; 160
     560:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <bufferI2C>
     564:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_Master_Write>
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	11 f0       	breq	.+4      	; 0x570 <Esp32Slave_W+0x16>
     56c:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     570:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <receivedValue>
     574:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_Master_Write>
     578:	81 30       	cpi	r24, 0x01	; 1
     57a:	11 f0       	breq	.+4      	; 0x580 <Esp32Slave_W+0x26>
     57c:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     580:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     584:	08 95       	ret

00000586 <Esp32Slave_WTemp>:
     586:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Master_Start>
     58a:	80 ea       	ldi	r24, 0xA0	; 160
     58c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <bufferI2C>
     590:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_Master_Write>
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	11 f0       	breq	.+4      	; 0x59c <Esp32Slave_WTemp+0x16>
     598:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     59c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TempS>
     5a0:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_Master_Write>
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	11 f0       	breq	.+4      	; 0x5ac <Esp32Slave_WTemp+0x26>
     5a8:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     5ac:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     5b0:	08 95       	ret

000005b2 <Esp32Slave_WUltra>:
     5b2:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Master_Start>
     5b6:	80 ea       	ldi	r24, 0xA0	; 160
     5b8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <bufferI2C>
     5bc:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_Master_Write>
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	11 f0       	breq	.+4      	; 0x5c8 <Esp32Slave_WUltra+0x16>
     5c4:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     5c8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <receivedVU>
     5cc:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_Master_Write>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	11 f0       	breq	.+4      	; 0x5d8 <Esp32Slave_WUltra+0x26>
     5d4:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     5d8:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     5dc:	08 95       	ret

000005de <newLista>:
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	fc 01       	movw	r30, r24
     5e4:	9b 01       	movw	r18, r22
     5e6:	cb 01       	movw	r24, r22
     5e8:	64 e6       	ldi	r22, 0x64	; 100
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
     5f0:	60 5d       	subi	r22, 0xD0	; 208
     5f2:	60 83       	st	Z, r22
     5f4:	ca e0       	ldi	r28, 0x0A	; 10
     5f6:	d0 e0       	ldi	r29, 0x00	; 0
     5f8:	c9 01       	movw	r24, r18
     5fa:	be 01       	movw	r22, r28
     5fc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
     600:	28 2f       	mov	r18, r24
     602:	cb 01       	movw	r24, r22
     604:	be 01       	movw	r22, r28
     606:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
     60a:	80 5d       	subi	r24, 0xD0	; 208
     60c:	81 83       	std	Z+1, r24	; 0x01
     60e:	20 5d       	subi	r18, 0xD0	; 208
     610:	22 83       	std	Z+2, r18	; 0x02
     612:	13 82       	std	Z+3, r1	; 0x03
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <UpdateULTRA>:

void UpdateULTRA(char *ULTRAlista, int valorULTRA) {
     61a:	fc 01       	movw	r30, r24
     61c:	9b 01       	movw	r18, r22
	// Construir la cadena en formato [ENTERO].[DECIMAL]
	int entero = valorULTRA / 10;   // Parte entera de la distancia
     61e:	cb 01       	movw	r24, r22
     620:	6a e0       	ldi	r22, 0x0A	; 10
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
	int decimal = valorULTRA % 10;  // Parte decimal

	// Para valores menores a 10 (0-9), mostramos 0 en la parte entera
	if (valorULTRA < 10) {
     628:	2a 30       	cpi	r18, 0x0A	; 10
     62a:	31 05       	cpc	r19, r1
     62c:	4c f4       	brge	.+18     	; 0x640 <UpdateULTRA+0x26>
		ULTRAlista[0] = '0';               // Parte entera (cero inicial)
     62e:	80 e3       	ldi	r24, 0x30	; 48
     630:	80 83       	st	Z, r24
		ULTRAlista[1] = '0' + valorULTRA;  // Parte decimal
     632:	20 5d       	subi	r18, 0xD0	; 208
     634:	21 83       	std	Z+1, r18	; 0x01
		ULTRAlista[2] = 'c';
     636:	83 e6       	ldi	r24, 0x63	; 99
     638:	82 83       	std	Z+2, r24	; 0x02
		ULTRAlista[3] = 'm';               // Parte decimal siempre 0
     63a:	8d e6       	ldi	r24, 0x6D	; 109
     63c:	83 83       	std	Z+3, r24	; 0x03
     63e:	08 c0       	rjmp	.+16     	; 0x650 <UpdateULTRA+0x36>
		} else {
		ULTRAlista[0] = '0' + entero;      // Parte entera
     640:	60 5d       	subi	r22, 0xD0	; 208
     642:	60 83       	st	Z, r22
		ULTRAlista[1] = '0' + decimal;     // Parte decimal
     644:	80 5d       	subi	r24, 0xD0	; 208
     646:	81 83       	std	Z+1, r24	; 0x01
		ULTRAlista[2] = 'c';
     648:	83 e6       	ldi	r24, 0x63	; 99
     64a:	82 83       	std	Z+2, r24	; 0x02
		ULTRAlista[3] = 'm';               // Parte decimal siempre 0
     64c:	8d e6       	ldi	r24, 0x6D	; 109
     64e:	83 83       	std	Z+3, r24	; 0x03
	}
	ULTRAlista[4] = '\0';  // Terminar la cadena
     650:	14 82       	std	Z+4, r1	; 0x04
     652:	08 95       	ret

00000654 <Slave2ULTRA>:
}


void Slave2ULTRA(void) {
	I2C_Master_Start();
     654:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Master_Start>
	bufferI2C = (slave2 << 1) | 0b00000001;  // Mandando Maestro a leer (SLA + R)
     658:	81 e8       	ldi	r24, 0x81	; 129
     65a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <bufferI2C>
	if (I2C_Master_Write(bufferI2C) != 1) {  // Si no se recibe ACK, detener la comunicación
     65e:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_Master_Write>
     662:	81 30       	cpi	r24, 0x01	; 1
     664:	11 f0       	breq	.+4      	; 0x66a <Slave2ULTRA+0x16>
		I2C_Master_Stop();
     666:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
	}
	
	if (I2C_Master_Read(&receivedVU, 0) == 1) {  // Leer el valor enviado por el esclavo
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	87 e1       	ldi	r24, 0x17	; 23
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_Master_Read>
		// El valor recibido está en receivedVU
	}
	
	I2C_Master_Stop();
     674:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Master_Stop>
     678:	08 95       	ret

0000067a <main>:
void Esp32Slave_WUltra(void);


int main(void)
{
	setup();
     67a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <setup>
	SetupPWM1(Fast8,Positivo,A,1024);   //Salida D9
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	34 e0       	ldi	r19, 0x04	; 4
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	85 e0       	ldi	r24, 0x05	; 5
     688:	0e 94 15 04 	call	0x82a	; 0x82a <SetupPWM1>
    I2C_Master_Init(100000,1); //inicializar como Master Fscl 100Khz, preescaler 1
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	80 ea       	ldi	r24, 0xA0	; 160
     690:	96 e8       	ldi	r25, 0x86	; 134
     692:	0e 94 5d 00 	call	0xba	; 0xba <I2C_Master_Init>
	initLCD4bits();
     696:	0e 94 ac 01 	call	0x358	; 0x358 <initLCD4bits>
	LCD_Set_Cursor(1,1);
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("Dis:");
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	LCD_Set_Cursor(12,1); //
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	8c e0       	ldi	r24, 0x0C	; 12
     6ae:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("ADC:");
     6b2:	85 e0       	ldi	r24, 0x05	; 5
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	
	LCD_Set_Cursor(6, 1);
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	86 e0       	ldi	r24, 0x06	; 6
     6be:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
	LCD_Write_String("temp:");
     6c2:	8a e0       	ldi	r24, 0x0A	; 10
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
	
    while (1) 
    {
		Slave1();
     6ca:	0e 94 48 02 	call	0x490	; 0x490 <Slave1>
		// Convertir el valor recibido a un formato de cadena para el LCD
		newLista(lista1, receivedValue);
     6ce:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <receivedValue>
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	87 ea       	ldi	r24, 0xA7	; 167
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 ef 02 	call	0x5de	; 0x5de <newLista>
		
		LCD_Set_Cursor(12,2);
     6dc:	62 e0       	ldi	r22, 0x02	; 2
     6de:	8c e0       	ldi	r24, 0x0C	; 12
     6e0:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
		LCD_Write_String(lista1);
     6e4:	87 ea       	ldi	r24, 0xA7	; 167
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
		
		Slave2ULTRA();
     6ec:	0e 94 2a 03 	call	0x654	; 0x654 <Slave2ULTRA>
		// Convertir el valor recibido a un formato de cadena para el LCD
		UpdateULTRA(listaULTRA1, receivedVU);
     6f0:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <receivedVU>
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	83 e2       	ldi	r24, 0x23	; 35
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 0d 03 	call	0x61a	; 0x61a <UpdateULTRA>
		
		LCD_Set_Cursor(1,2);
     6fe:	62 e0       	ldi	r22, 0x02	; 2
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
		LCD_Write_String(listaULTRA1);
     706:	83 e2       	ldi	r24, 0x23	; 35
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
		
		
		
		Esp32Slave_W(); 
     70e:	0e 94 ad 02 	call	0x55a	; 0x55a <Esp32Slave_W>
		Esp32Slave_WTemp();
     712:	0e 94 c3 02 	call	0x586	; 0x586 <Esp32Slave_WTemp>
		Esp32Slave_WUltra();
     716:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Esp32Slave_WUltra>
		
		switch(LecEsp32){
     71a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <LecEsp32>
     71e:	88 23       	and	r24, r24
     720:	19 f0       	breq	.+6      	; 0x728 <main+0xae>
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	c1 f0       	breq	.+48     	; 0x756 <main+0xdc>
     726:	21 c0       	rjmp	.+66     	; 0x76a <main+0xf0>
			case 0:
				PORTB &= ~(1<<PORTB3);
     728:	85 b1       	in	r24, 0x05	; 5
     72a:	87 7f       	andi	r24, 0xF7	; 247
     72c:	85 b9       	out	0x05, r24	; 5
				
				
				if (receivedValue < LOW_THRESHOLD  ) {
     72e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <receivedValue>
     732:	84 36       	cpi	r24, 0x64	; 100
     734:	40 f4       	brcc	.+16     	; 0x746 <main+0xcc>
					PORTD |= (1<<PORTD2);  // Enciende el LED
     736:	8b b1       	in	r24, 0x0b	; 11
     738:	84 60       	ori	r24, 0x04	; 4
     73a:	8b b9       	out	0x0b, r24	; 11
					//ciclo_traba1A(36);
					ciclo_traba1A(26);
     73c:	8a e1       	ldi	r24, 0x1A	; 26
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <ciclo_traba1A>
     744:	12 c0       	rjmp	.+36     	; 0x76a <main+0xf0>
					
					
					} else{
					PORTD &= ~(1<<PORTD2); // Apaga el LED
     746:	8b b1       	in	r24, 0x0b	; 11
     748:	8b 7f       	andi	r24, 0xFB	; 251
     74a:	8b b9       	out	0x0b, r24	; 11
					//ciclo_traba1A(22);
					ciclo_traba1A(38);
     74c:	86 e2       	ldi	r24, 0x26	; 38
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <ciclo_traba1A>
     754:	0a c0       	rjmp	.+20     	; 0x76a <main+0xf0>
				}
				break;
			case 1:
				PORTB |= (1<<PORTB3);
     756:	85 b1       	in	r24, 0x05	; 5
     758:	88 60       	ori	r24, 0x08	; 8
     75a:	85 b9       	out	0x05, r24	; 5
				PORTD &= ~(1<<PORTD2); // Apaga el LED
     75c:	8b b1       	in	r24, 0x0b	; 11
     75e:	8b 7f       	andi	r24, 0xFB	; 251
     760:	8b b9       	out	0x0b, r24	; 11
				ciclo_traba1A(38);
     762:	86 e2       	ldi	r24, 0x26	; 38
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <ciclo_traba1A>
				break;
		}
		
		switch(LecEspSer){
     76a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <LecEspSer>
     76e:	88 23       	and	r24, r24
     770:	19 f0       	breq	.+6      	; 0x778 <main+0xfe>
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	19 f1       	breq	.+70     	; 0x7bc <main+0x142>
     776:	28 c0       	rjmp	.+80     	; 0x7c8 <main+0x14e>
			case 0:
				//PORTB &= ~(1<<PORTB0);
				PORTB &= ~(1<<PORTB4);
     778:	85 b1       	in	r24, 0x05	; 5
     77a:	8f 7e       	andi	r24, 0xEF	; 239
     77c:	85 b9       	out	0x05, r24	; 5
				if (TempS > 28 && !led_state || LecEsp32 == '1') {  // Encender LED por encima de 27°C
     77e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TempS>
     782:	8d 31       	cpi	r24, 0x1D	; 29
     784:	20 f0       	brcs	.+8      	; 0x78e <main+0x114>
     786:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <__data_end>
     78a:	99 23       	and	r25, r25
     78c:	21 f0       	breq	.+8      	; 0x796 <main+0x11c>
     78e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <LecEsp32>
     792:	91 33       	cpi	r25, 0x31	; 49
     794:	39 f4       	brne	.+14     	; 0x7a4 <main+0x12a>
					PORTB |= (1 << PORTB0);
     796:	85 b1       	in	r24, 0x05	; 5
     798:	81 60       	ori	r24, 0x01	; 1
     79a:	85 b9       	out	0x05, r24	; 5
					led_state = 1;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
     7a2:	12 c0       	rjmp	.+36     	; 0x7c8 <main+0x14e>
					} else if (TempS <= 27 && led_state) {  // Apagar LED por debajo de 25°C
     7a4:	8c 31       	cpi	r24, 0x1C	; 28
     7a6:	80 f4       	brcc	.+32     	; 0x7c8 <main+0x14e>
     7a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
     7ac:	88 23       	and	r24, r24
     7ae:	61 f0       	breq	.+24     	; 0x7c8 <main+0x14e>
					PORTB &= ~(1 << PORTB0);
     7b0:	85 b1       	in	r24, 0x05	; 5
     7b2:	8e 7f       	andi	r24, 0xFE	; 254
     7b4:	85 b9       	out	0x05, r24	; 5
					led_state = 0;
     7b6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
     7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <main+0x14e>
				}
				break;
			case 1:
				PORTB |= (1<<PORTB4);
     7bc:	85 b1       	in	r24, 0x05	; 5
     7be:	80 61       	ori	r24, 0x10	; 16
     7c0:	85 b9       	out	0x05, r24	; 5
				
				PORTB |= (1<<PORTB0);
     7c2:	85 b1       	in	r24, 0x05	; 5
     7c4:	81 60       	ori	r24, 0x01	; 1
     7c6:	85 b9       	out	0x05, r24	; 5
				break;
		}
		
		
		TempRaw = I2C_read_data_16bits(LM75_ADDRESS, &TempRaw);
     7c8:	6b e1       	ldi	r22, 0x1B	; 27
     7ca:	71 e0       	ldi	r23, 0x01	; 1
     7cc:	88 e4       	ldi	r24, 0x48	; 72
     7ce:	0e 94 03 01 	call	0x206	; 0x206 <I2C_read_data_16bits>
     7d2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <TempRaw>
     7d6:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <TempRaw+0x1>
		TempS = TempRaw/256; 
     7da:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <TempS>
		
		LCD_Set_Cursor(6,2);
     7de:	62 e0       	ldi	r22, 0x02	; 2
     7e0:	86 e0       	ldi	r24, 0x06	; 6
     7e2:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
		snprintf(buffer, sizeof(buffer), "%02d", TempS);
     7e6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <TempS>
     7ea:	1f 92       	push	r1
     7ec:	8f 93       	push	r24
     7ee:	80 e1       	ldi	r24, 0x10	; 16
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	9f 93       	push	r25
     7f4:	8f 93       	push	r24
     7f6:	1f 92       	push	r1
     7f8:	80 e8       	ldi	r24, 0x80	; 128
     7fa:	8f 93       	push	r24
     7fc:	87 e2       	ldi	r24, 0x27	; 39
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	9f 93       	push	r25
     802:	8f 93       	push	r24
     804:	0e 94 68 05 	call	0xad0	; 0xad0 <snprintf>
		LCD_Write_String(buffer); 
     808:	87 e2       	ldi	r24, 0x27	; 39
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
		
		
		Esp32_DCLec();
     810:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Esp32_DCLec>
		Esp32_ServLec(); 
     814:	0e 94 94 02 	call	0x528	; 0x528 <Esp32_ServLec>
		
    }
     818:	8d b7       	in	r24, 0x3d	; 61
     81a:	9e b7       	in	r25, 0x3e	; 62
     81c:	08 96       	adiw	r24, 0x08	; 8
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	9e bf       	out	0x3e, r25	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	8d bf       	out	0x3d, r24	; 61
     828:	50 cf       	rjmp	.-352    	; 0x6ca <main+0x50>

0000082a <SetupPWM1>:
		break;
		case 256:
		TCCR2B |= (1<<CS22)|(1<<CS21);
		break;
		case 1024:
		TCCR2B |= (1<<CS20)|(1<<CS22)|(1<<CS21);
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	d9 01       	movw	r26, r18
     830:	08 2f       	mov	r16, r24
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	0a 30       	cpi	r16, 0x0A	; 10
     836:	11 05       	cpc	r17, r1
     838:	08 f0       	brcs	.+2      	; 0x83c <SetupPWM1+0x12>
     83a:	5e c0       	rjmp	.+188    	; 0x8f8 <SetupPWM1+0xce>
     83c:	f8 01       	movw	r30, r16
     83e:	ec 5c       	subi	r30, 0xCC	; 204
     840:	ff 4f       	sbci	r31, 0xFF	; 255
     842:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__tablejump2__>
     846:	e0 e8       	ldi	r30, 0x80	; 128
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	90 81       	ld	r25, Z
     84c:	91 60       	ori	r25, 0x01	; 1
     84e:	90 83       	st	Z, r25
     850:	53 c0       	rjmp	.+166    	; 0x8f8 <SetupPWM1+0xce>
     852:	e0 e8       	ldi	r30, 0x80	; 128
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	90 81       	ld	r25, Z
     858:	92 60       	ori	r25, 0x02	; 2
     85a:	90 83       	st	Z, r25
     85c:	4d c0       	rjmp	.+154    	; 0x8f8 <SetupPWM1+0xce>
     85e:	e0 e8       	ldi	r30, 0x80	; 128
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	90 81       	ld	r25, Z
     864:	93 60       	ori	r25, 0x03	; 3
     866:	90 83       	st	Z, r25
     868:	47 c0       	rjmp	.+142    	; 0x8f8 <SetupPWM1+0xce>
     86a:	e1 e8       	ldi	r30, 0x81	; 129
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	90 81       	ld	r25, Z
     870:	90 61       	ori	r25, 0x10	; 16
     872:	90 83       	st	Z, r25
     874:	41 c0       	rjmp	.+130    	; 0x8f8 <SetupPWM1+0xce>
     876:	e1 e8       	ldi	r30, 0x81	; 129
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	90 81       	ld	r25, Z
     87c:	90 61       	ori	r25, 0x10	; 16
     87e:	90 83       	st	Z, r25
     880:	e0 e8       	ldi	r30, 0x80	; 128
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	90 81       	ld	r25, Z
     886:	98 60       	ori	r25, 0x08	; 8
     888:	90 83       	st	Z, r25
     88a:	36 c0       	rjmp	.+108    	; 0x8f8 <SetupPWM1+0xce>
     88c:	e1 e8       	ldi	r30, 0x81	; 129
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	90 81       	ld	r25, Z
     892:	98 60       	ori	r25, 0x08	; 8
     894:	90 83       	st	Z, r25
     896:	e0 e8       	ldi	r30, 0x80	; 128
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	90 81       	ld	r25, Z
     89c:	91 60       	ori	r25, 0x01	; 1
     89e:	90 83       	st	Z, r25
     8a0:	2b c0       	rjmp	.+86     	; 0x8f8 <SetupPWM1+0xce>
     8a2:	e1 e8       	ldi	r30, 0x81	; 129
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	90 81       	ld	r25, Z
     8a8:	98 60       	ori	r25, 0x08	; 8
     8aa:	90 83       	st	Z, r25
     8ac:	e0 e8       	ldi	r30, 0x80	; 128
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	90 81       	ld	r25, Z
     8b2:	92 60       	ori	r25, 0x02	; 2
     8b4:	90 83       	st	Z, r25
     8b6:	20 c0       	rjmp	.+64     	; 0x8f8 <SetupPWM1+0xce>
     8b8:	e1 e8       	ldi	r30, 0x81	; 129
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	90 81       	ld	r25, Z
     8be:	98 60       	ori	r25, 0x08	; 8
     8c0:	90 83       	st	Z, r25
     8c2:	e0 e8       	ldi	r30, 0x80	; 128
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	90 81       	ld	r25, Z
     8c8:	93 60       	ori	r25, 0x03	; 3
     8ca:	90 83       	st	Z, r25
     8cc:	15 c0       	rjmp	.+42     	; 0x8f8 <SetupPWM1+0xce>
     8ce:	e1 e8       	ldi	r30, 0x81	; 129
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	90 81       	ld	r25, Z
     8d4:	98 61       	ori	r25, 0x18	; 24
     8d6:	90 83       	st	Z, r25
     8d8:	e0 e8       	ldi	r30, 0x80	; 128
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	90 81       	ld	r25, Z
     8de:	92 60       	ori	r25, 0x02	; 2
     8e0:	90 83       	st	Z, r25
     8e2:	0a c0       	rjmp	.+20     	; 0x8f8 <SetupPWM1+0xce>
     8e4:	e1 e8       	ldi	r30, 0x81	; 129
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	90 81       	ld	r25, Z
     8ea:	98 61       	ori	r25, 0x18	; 24
     8ec:	90 83       	st	Z, r25
     8ee:	e0 e8       	ldi	r30, 0x80	; 128
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	90 81       	ld	r25, Z
     8f4:	93 60       	ori	r25, 0x03	; 3
     8f6:	90 83       	st	Z, r25
     8f8:	51 e0       	ldi	r21, 0x01	; 1
     8fa:	2b ef       	ldi	r18, 0xFB	; 251
     8fc:	28 0f       	add	r18, r24
     8fe:	22 30       	cpi	r18, 0x02	; 2
     900:	08 f0       	brcs	.+2      	; 0x904 <__stack+0x5>
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	31 e0       	ldi	r19, 0x01	; 1
     906:	87 30       	cpi	r24, 0x07	; 7
     908:	09 f0       	breq	.+2      	; 0x90c <__stack+0xd>
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	88 30       	cpi	r24, 0x08	; 8
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x15>
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	21 e0       	ldi	r18, 0x01	; 1
     916:	89 30       	cpi	r24, 0x09	; 9
     918:	09 f0       	breq	.+2      	; 0x91c <__stack+0x1d>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	35 2b       	or	r19, r21
     91e:	93 2b       	or	r25, r19
     920:	11 f4       	brne	.+4      	; 0x926 <__stack+0x27>
     922:	22 23       	and	r18, r18
     924:	81 f1       	breq	.+96     	; 0x986 <__stack+0x87>
     926:	44 23       	and	r20, r20
     928:	19 f0       	breq	.+6      	; 0x930 <__stack+0x31>
     92a:	41 30       	cpi	r20, 0x01	; 1
     92c:	b9 f0       	breq	.+46     	; 0x95c <__stack+0x5d>
     92e:	2b c0       	rjmp	.+86     	; 0x986 <__stack+0x87>
     930:	66 23       	and	r22, r22
     932:	41 f0       	breq	.+16     	; 0x944 <__stack+0x45>
     934:	61 30       	cpi	r22, 0x01	; 1
     936:	59 f4       	brne	.+22     	; 0x94e <__stack+0x4f>
     938:	e0 e8       	ldi	r30, 0x80	; 128
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	80 68       	ori	r24, 0x80	; 128
     940:	80 83       	st	Z, r24
     942:	05 c0       	rjmp	.+10     	; 0x94e <__stack+0x4f>
     944:	e0 e8       	ldi	r30, 0x80	; 128
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	80 6c       	ori	r24, 0xC0	; 192
     94c:	80 83       	st	Z, r24
     94e:	84 b1       	in	r24, 0x04	; 4
     950:	82 60       	ori	r24, 0x02	; 2
     952:	84 b9       	out	0x04, r24	; 4
     954:	85 b1       	in	r24, 0x05	; 5
     956:	8d 7f       	andi	r24, 0xFD	; 253
     958:	85 b9       	out	0x05, r24	; 5
     95a:	15 c0       	rjmp	.+42     	; 0x986 <__stack+0x87>
     95c:	66 23       	and	r22, r22
     95e:	41 f0       	breq	.+16     	; 0x970 <__stack+0x71>
     960:	61 30       	cpi	r22, 0x01	; 1
     962:	59 f4       	brne	.+22     	; 0x97a <__stack+0x7b>
     964:	e0 e8       	ldi	r30, 0x80	; 128
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	80 62       	ori	r24, 0x20	; 32
     96c:	80 83       	st	Z, r24
     96e:	05 c0       	rjmp	.+10     	; 0x97a <__stack+0x7b>
     970:	e0 e8       	ldi	r30, 0x80	; 128
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	80 63       	ori	r24, 0x30	; 48
     978:	80 83       	st	Z, r24
     97a:	84 b1       	in	r24, 0x04	; 4
     97c:	84 60       	ori	r24, 0x04	; 4
     97e:	84 b9       	out	0x04, r24	; 4
     980:	85 b1       	in	r24, 0x05	; 5
     982:	8b 7f       	andi	r24, 0xFB	; 251
     984:	85 b9       	out	0x05, r24	; 5
     986:	a0 34       	cpi	r26, 0x40	; 64
     988:	b1 05       	cpc	r27, r1
     98a:	d1 f0       	breq	.+52     	; 0x9c0 <__stack+0xc1>
     98c:	28 f4       	brcc	.+10     	; 0x998 <__stack+0x99>
     98e:	10 97       	sbiw	r26, 0x00	; 0
     990:	59 f0       	breq	.+22     	; 0x9a8 <__stack+0xa9>
     992:	18 97       	sbiw	r26, 0x08	; 8
     994:	79 f0       	breq	.+30     	; 0x9b4 <__stack+0xb5>
     996:	25 c0       	rjmp	.+74     	; 0x9e2 <__stack+0xe3>
     998:	a1 15       	cp	r26, r1
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	b8 07       	cpc	r27, r24
     99e:	b1 f0       	breq	.+44     	; 0x9cc <__stack+0xcd>
     9a0:	a1 15       	cp	r26, r1
     9a2:	b4 40       	sbci	r27, 0x04	; 4
     9a4:	c9 f0       	breq	.+50     	; 0x9d8 <__stack+0xd9>
     9a6:	1d c0       	rjmp	.+58     	; 0x9e2 <__stack+0xe3>
     9a8:	e1 e8       	ldi	r30, 0x81	; 129
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	81 60       	ori	r24, 0x01	; 1
     9b0:	80 83       	st	Z, r24
     9b2:	17 c0       	rjmp	.+46     	; 0x9e2 <__stack+0xe3>
     9b4:	e1 e8       	ldi	r30, 0x81	; 129
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	82 60       	ori	r24, 0x02	; 2
     9bc:	80 83       	st	Z, r24
     9be:	11 c0       	rjmp	.+34     	; 0x9e2 <__stack+0xe3>
     9c0:	e1 e8       	ldi	r30, 0x81	; 129
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	83 60       	ori	r24, 0x03	; 3
     9c8:	80 83       	st	Z, r24
     9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <__stack+0xe3>
     9cc:	e1 e8       	ldi	r30, 0x81	; 129
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	84 60       	ori	r24, 0x04	; 4
     9d4:	80 83       	st	Z, r24
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <__stack+0xe3>
     9d8:	e1 e8       	ldi	r30, 0x81	; 129
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	85 60       	ori	r24, 0x05	; 5
     9e0:	80 83       	st	Z, r24
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	08 95       	ret

000009e8 <ciclo_traba1A>:
	}
	//TIMSK2 |= (1<<TOIE2);
}

void ciclo_traba1A(int ciclo){
	OCR1A = ciclo;
     9e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     9ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     9f0:	08 95       	ret

000009f2 <__divmodhi4>:
     9f2:	97 fb       	bst	r25, 7
     9f4:	07 2e       	mov	r0, r23
     9f6:	16 f4       	brtc	.+4      	; 0x9fc <__divmodhi4+0xa>
     9f8:	00 94       	com	r0
     9fa:	07 d0       	rcall	.+14     	; 0xa0a <__divmodhi4_neg1>
     9fc:	77 fd       	sbrc	r23, 7
     9fe:	09 d0       	rcall	.+18     	; 0xa12 <__divmodhi4_neg2>
     a00:	0e 94 32 05 	call	0xa64	; 0xa64 <__udivmodhi4>
     a04:	07 fc       	sbrc	r0, 7
     a06:	05 d0       	rcall	.+10     	; 0xa12 <__divmodhi4_neg2>
     a08:	3e f4       	brtc	.+14     	; 0xa18 <__divmodhi4_exit>

00000a0a <__divmodhi4_neg1>:
     a0a:	90 95       	com	r25
     a0c:	81 95       	neg	r24
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	08 95       	ret

00000a12 <__divmodhi4_neg2>:
     a12:	70 95       	com	r23
     a14:	61 95       	neg	r22
     a16:	7f 4f       	sbci	r23, 0xFF	; 255

00000a18 <__divmodhi4_exit>:
     a18:	08 95       	ret

00000a1a <__divmodsi4>:
     a1a:	05 2e       	mov	r0, r21
     a1c:	97 fb       	bst	r25, 7
     a1e:	1e f4       	brtc	.+6      	; 0xa26 <__divmodsi4+0xc>
     a20:	00 94       	com	r0
     a22:	0e 94 24 05 	call	0xa48	; 0xa48 <__negsi2>
     a26:	57 fd       	sbrc	r21, 7
     a28:	07 d0       	rcall	.+14     	; 0xa38 <__divmodsi4_neg2>
     a2a:	0e 94 46 05 	call	0xa8c	; 0xa8c <__udivmodsi4>
     a2e:	07 fc       	sbrc	r0, 7
     a30:	03 d0       	rcall	.+6      	; 0xa38 <__divmodsi4_neg2>
     a32:	4e f4       	brtc	.+18     	; 0xa46 <__divmodsi4_exit>
     a34:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__negsi2>

00000a38 <__divmodsi4_neg2>:
     a38:	50 95       	com	r21
     a3a:	40 95       	com	r20
     a3c:	30 95       	com	r19
     a3e:	21 95       	neg	r18
     a40:	3f 4f       	sbci	r19, 0xFF	; 255
     a42:	4f 4f       	sbci	r20, 0xFF	; 255
     a44:	5f 4f       	sbci	r21, 0xFF	; 255

00000a46 <__divmodsi4_exit>:
     a46:	08 95       	ret

00000a48 <__negsi2>:
     a48:	90 95       	com	r25
     a4a:	80 95       	com	r24
     a4c:	70 95       	com	r23
     a4e:	61 95       	neg	r22
     a50:	7f 4f       	sbci	r23, 0xFF	; 255
     a52:	8f 4f       	sbci	r24, 0xFF	; 255
     a54:	9f 4f       	sbci	r25, 0xFF	; 255
     a56:	08 95       	ret

00000a58 <__tablejump2__>:
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	05 90       	lpm	r0, Z+
     a5e:	f4 91       	lpm	r31, Z
     a60:	e0 2d       	mov	r30, r0
     a62:	09 94       	ijmp

00000a64 <__udivmodhi4>:
     a64:	aa 1b       	sub	r26, r26
     a66:	bb 1b       	sub	r27, r27
     a68:	51 e1       	ldi	r21, 0x11	; 17
     a6a:	07 c0       	rjmp	.+14     	; 0xa7a <__udivmodhi4_ep>

00000a6c <__udivmodhi4_loop>:
     a6c:	aa 1f       	adc	r26, r26
     a6e:	bb 1f       	adc	r27, r27
     a70:	a6 17       	cp	r26, r22
     a72:	b7 07       	cpc	r27, r23
     a74:	10 f0       	brcs	.+4      	; 0xa7a <__udivmodhi4_ep>
     a76:	a6 1b       	sub	r26, r22
     a78:	b7 0b       	sbc	r27, r23

00000a7a <__udivmodhi4_ep>:
     a7a:	88 1f       	adc	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	5a 95       	dec	r21
     a80:	a9 f7       	brne	.-22     	; 0xa6c <__udivmodhi4_loop>
     a82:	80 95       	com	r24
     a84:	90 95       	com	r25
     a86:	bc 01       	movw	r22, r24
     a88:	cd 01       	movw	r24, r26
     a8a:	08 95       	ret

00000a8c <__udivmodsi4>:
     a8c:	a1 e2       	ldi	r26, 0x21	; 33
     a8e:	1a 2e       	mov	r1, r26
     a90:	aa 1b       	sub	r26, r26
     a92:	bb 1b       	sub	r27, r27
     a94:	fd 01       	movw	r30, r26
     a96:	0d c0       	rjmp	.+26     	; 0xab2 <__udivmodsi4_ep>

00000a98 <__udivmodsi4_loop>:
     a98:	aa 1f       	adc	r26, r26
     a9a:	bb 1f       	adc	r27, r27
     a9c:	ee 1f       	adc	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	a2 17       	cp	r26, r18
     aa2:	b3 07       	cpc	r27, r19
     aa4:	e4 07       	cpc	r30, r20
     aa6:	f5 07       	cpc	r31, r21
     aa8:	20 f0       	brcs	.+8      	; 0xab2 <__udivmodsi4_ep>
     aaa:	a2 1b       	sub	r26, r18
     aac:	b3 0b       	sbc	r27, r19
     aae:	e4 0b       	sbc	r30, r20
     ab0:	f5 0b       	sbc	r31, r21

00000ab2 <__udivmodsi4_ep>:
     ab2:	66 1f       	adc	r22, r22
     ab4:	77 1f       	adc	r23, r23
     ab6:	88 1f       	adc	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	1a 94       	dec	r1
     abc:	69 f7       	brne	.-38     	; 0xa98 <__udivmodsi4_loop>
     abe:	60 95       	com	r22
     ac0:	70 95       	com	r23
     ac2:	80 95       	com	r24
     ac4:	90 95       	com	r25
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	bd 01       	movw	r22, r26
     acc:	cf 01       	movw	r24, r30
     ace:	08 95       	ret

00000ad0 <snprintf>:
     ad0:	ae e0       	ldi	r26, 0x0E	; 14
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	ee e6       	ldi	r30, 0x6E	; 110
     ad6:	f5 e0       	ldi	r31, 0x05	; 5
     ad8:	0c 94 37 08 	jmp	0x106e	; 0x106e <__prologue_saves__+0x1c>
     adc:	0d 89       	ldd	r16, Y+21	; 0x15
     ade:	1e 89       	ldd	r17, Y+22	; 0x16
     ae0:	8f 89       	ldd	r24, Y+23	; 0x17
     ae2:	98 8d       	ldd	r25, Y+24	; 0x18
     ae4:	26 e0       	ldi	r18, 0x06	; 6
     ae6:	2c 83       	std	Y+4, r18	; 0x04
     ae8:	1a 83       	std	Y+2, r17	; 0x02
     aea:	09 83       	std	Y+1, r16	; 0x01
     aec:	97 ff       	sbrs	r25, 7
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <snprintf+0x24>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e8       	ldi	r25, 0x80	; 128
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	9e 83       	std	Y+6, r25	; 0x06
     af8:	8d 83       	std	Y+5, r24	; 0x05
     afa:	ae 01       	movw	r20, r28
     afc:	45 5e       	subi	r20, 0xE5	; 229
     afe:	5f 4f       	sbci	r21, 0xFF	; 255
     b00:	69 8d       	ldd	r22, Y+25	; 0x19
     b02:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	0e 94 98 05 	call	0xb30	; 0xb30 <vfprintf>
     b0c:	4d 81       	ldd	r20, Y+5	; 0x05
     b0e:	5e 81       	ldd	r21, Y+6	; 0x06
     b10:	57 fd       	sbrc	r21, 7
     b12:	0a c0       	rjmp	.+20     	; 0xb28 <snprintf+0x58>
     b14:	2f 81       	ldd	r18, Y+7	; 0x07
     b16:	38 85       	ldd	r19, Y+8	; 0x08
     b18:	42 17       	cp	r20, r18
     b1a:	53 07       	cpc	r21, r19
     b1c:	0c f4       	brge	.+2      	; 0xb20 <snprintf+0x50>
     b1e:	9a 01       	movw	r18, r20
     b20:	f8 01       	movw	r30, r16
     b22:	e2 0f       	add	r30, r18
     b24:	f3 1f       	adc	r31, r19
     b26:	10 82       	st	Z, r1
     b28:	2e 96       	adiw	r28, 0x0e	; 14
     b2a:	e4 e0       	ldi	r30, 0x04	; 4
     b2c:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__epilogue_restores__+0x1c>

00000b30 <vfprintf>:
     b30:	ab e0       	ldi	r26, 0x0B	; 11
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	ee e9       	ldi	r30, 0x9E	; 158
     b36:	f5 e0       	ldi	r31, 0x05	; 5
     b38:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__prologue_saves__>
     b3c:	6c 01       	movw	r12, r24
     b3e:	7b 01       	movw	r14, r22
     b40:	8a 01       	movw	r16, r20
     b42:	fc 01       	movw	r30, r24
     b44:	17 82       	std	Z+7, r1	; 0x07
     b46:	16 82       	std	Z+6, r1	; 0x06
     b48:	83 81       	ldd	r24, Z+3	; 0x03
     b4a:	81 ff       	sbrs	r24, 1
     b4c:	cc c1       	rjmp	.+920    	; 0xee6 <vfprintf+0x3b6>
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	3c 01       	movw	r6, r24
     b54:	f6 01       	movw	r30, r12
     b56:	93 81       	ldd	r25, Z+3	; 0x03
     b58:	f7 01       	movw	r30, r14
     b5a:	93 fd       	sbrc	r25, 3
     b5c:	85 91       	lpm	r24, Z+
     b5e:	93 ff       	sbrs	r25, 3
     b60:	81 91       	ld	r24, Z+
     b62:	7f 01       	movw	r14, r30
     b64:	88 23       	and	r24, r24
     b66:	09 f4       	brne	.+2      	; 0xb6a <vfprintf+0x3a>
     b68:	ba c1       	rjmp	.+884    	; 0xede <vfprintf+0x3ae>
     b6a:	85 32       	cpi	r24, 0x25	; 37
     b6c:	39 f4       	brne	.+14     	; 0xb7c <vfprintf+0x4c>
     b6e:	93 fd       	sbrc	r25, 3
     b70:	85 91       	lpm	r24, Z+
     b72:	93 ff       	sbrs	r25, 3
     b74:	81 91       	ld	r24, Z+
     b76:	7f 01       	movw	r14, r30
     b78:	85 32       	cpi	r24, 0x25	; 37
     b7a:	29 f4       	brne	.+10     	; 0xb86 <vfprintf+0x56>
     b7c:	b6 01       	movw	r22, r12
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     b84:	e7 cf       	rjmp	.-50     	; 0xb54 <vfprintf+0x24>
     b86:	91 2c       	mov	r9, r1
     b88:	21 2c       	mov	r2, r1
     b8a:	31 2c       	mov	r3, r1
     b8c:	ff e1       	ldi	r31, 0x1F	; 31
     b8e:	f3 15       	cp	r31, r3
     b90:	d8 f0       	brcs	.+54     	; 0xbc8 <vfprintf+0x98>
     b92:	8b 32       	cpi	r24, 0x2B	; 43
     b94:	79 f0       	breq	.+30     	; 0xbb4 <vfprintf+0x84>
     b96:	38 f4       	brcc	.+14     	; 0xba6 <vfprintf+0x76>
     b98:	80 32       	cpi	r24, 0x20	; 32
     b9a:	79 f0       	breq	.+30     	; 0xbba <vfprintf+0x8a>
     b9c:	83 32       	cpi	r24, 0x23	; 35
     b9e:	a1 f4       	brne	.+40     	; 0xbc8 <vfprintf+0x98>
     ba0:	23 2d       	mov	r18, r3
     ba2:	20 61       	ori	r18, 0x10	; 16
     ba4:	1d c0       	rjmp	.+58     	; 0xbe0 <vfprintf+0xb0>
     ba6:	8d 32       	cpi	r24, 0x2D	; 45
     ba8:	61 f0       	breq	.+24     	; 0xbc2 <vfprintf+0x92>
     baa:	80 33       	cpi	r24, 0x30	; 48
     bac:	69 f4       	brne	.+26     	; 0xbc8 <vfprintf+0x98>
     bae:	23 2d       	mov	r18, r3
     bb0:	21 60       	ori	r18, 0x01	; 1
     bb2:	16 c0       	rjmp	.+44     	; 0xbe0 <vfprintf+0xb0>
     bb4:	83 2d       	mov	r24, r3
     bb6:	82 60       	ori	r24, 0x02	; 2
     bb8:	38 2e       	mov	r3, r24
     bba:	e3 2d       	mov	r30, r3
     bbc:	e4 60       	ori	r30, 0x04	; 4
     bbe:	3e 2e       	mov	r3, r30
     bc0:	2a c0       	rjmp	.+84     	; 0xc16 <vfprintf+0xe6>
     bc2:	f3 2d       	mov	r31, r3
     bc4:	f8 60       	ori	r31, 0x08	; 8
     bc6:	1d c0       	rjmp	.+58     	; 0xc02 <vfprintf+0xd2>
     bc8:	37 fc       	sbrc	r3, 7
     bca:	2d c0       	rjmp	.+90     	; 0xc26 <vfprintf+0xf6>
     bcc:	20 ed       	ldi	r18, 0xD0	; 208
     bce:	28 0f       	add	r18, r24
     bd0:	2a 30       	cpi	r18, 0x0A	; 10
     bd2:	40 f0       	brcs	.+16     	; 0xbe4 <vfprintf+0xb4>
     bd4:	8e 32       	cpi	r24, 0x2E	; 46
     bd6:	b9 f4       	brne	.+46     	; 0xc06 <vfprintf+0xd6>
     bd8:	36 fc       	sbrc	r3, 6
     bda:	81 c1       	rjmp	.+770    	; 0xede <vfprintf+0x3ae>
     bdc:	23 2d       	mov	r18, r3
     bde:	20 64       	ori	r18, 0x40	; 64
     be0:	32 2e       	mov	r3, r18
     be2:	19 c0       	rjmp	.+50     	; 0xc16 <vfprintf+0xe6>
     be4:	36 fe       	sbrs	r3, 6
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <vfprintf+0xc4>
     be8:	8a e0       	ldi	r24, 0x0A	; 10
     bea:	98 9e       	mul	r9, r24
     bec:	20 0d       	add	r18, r0
     bee:	11 24       	eor	r1, r1
     bf0:	92 2e       	mov	r9, r18
     bf2:	11 c0       	rjmp	.+34     	; 0xc16 <vfprintf+0xe6>
     bf4:	ea e0       	ldi	r30, 0x0A	; 10
     bf6:	2e 9e       	mul	r2, r30
     bf8:	20 0d       	add	r18, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	22 2e       	mov	r2, r18
     bfe:	f3 2d       	mov	r31, r3
     c00:	f0 62       	ori	r31, 0x20	; 32
     c02:	3f 2e       	mov	r3, r31
     c04:	08 c0       	rjmp	.+16     	; 0xc16 <vfprintf+0xe6>
     c06:	8c 36       	cpi	r24, 0x6C	; 108
     c08:	21 f4       	brne	.+8      	; 0xc12 <vfprintf+0xe2>
     c0a:	83 2d       	mov	r24, r3
     c0c:	80 68       	ori	r24, 0x80	; 128
     c0e:	38 2e       	mov	r3, r24
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <vfprintf+0xe6>
     c12:	88 36       	cpi	r24, 0x68	; 104
     c14:	41 f4       	brne	.+16     	; 0xc26 <vfprintf+0xf6>
     c16:	f7 01       	movw	r30, r14
     c18:	93 fd       	sbrc	r25, 3
     c1a:	85 91       	lpm	r24, Z+
     c1c:	93 ff       	sbrs	r25, 3
     c1e:	81 91       	ld	r24, Z+
     c20:	7f 01       	movw	r14, r30
     c22:	81 11       	cpse	r24, r1
     c24:	b3 cf       	rjmp	.-154    	; 0xb8c <vfprintf+0x5c>
     c26:	98 2f       	mov	r25, r24
     c28:	9f 7d       	andi	r25, 0xDF	; 223
     c2a:	95 54       	subi	r25, 0x45	; 69
     c2c:	93 30       	cpi	r25, 0x03	; 3
     c2e:	28 f4       	brcc	.+10     	; 0xc3a <vfprintf+0x10a>
     c30:	0c 5f       	subi	r16, 0xFC	; 252
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	9f e3       	ldi	r25, 0x3F	; 63
     c36:	99 83       	std	Y+1, r25	; 0x01
     c38:	0d c0       	rjmp	.+26     	; 0xc54 <vfprintf+0x124>
     c3a:	83 36       	cpi	r24, 0x63	; 99
     c3c:	31 f0       	breq	.+12     	; 0xc4a <vfprintf+0x11a>
     c3e:	83 37       	cpi	r24, 0x73	; 115
     c40:	71 f0       	breq	.+28     	; 0xc5e <vfprintf+0x12e>
     c42:	83 35       	cpi	r24, 0x53	; 83
     c44:	09 f0       	breq	.+2      	; 0xc48 <vfprintf+0x118>
     c46:	59 c0       	rjmp	.+178    	; 0xcfa <vfprintf+0x1ca>
     c48:	21 c0       	rjmp	.+66     	; 0xc8c <vfprintf+0x15c>
     c4a:	f8 01       	movw	r30, r16
     c4c:	80 81       	ld	r24, Z
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	0e 5f       	subi	r16, 0xFE	; 254
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	88 24       	eor	r8, r8
     c56:	83 94       	inc	r8
     c58:	91 2c       	mov	r9, r1
     c5a:	53 01       	movw	r10, r6
     c5c:	13 c0       	rjmp	.+38     	; 0xc84 <vfprintf+0x154>
     c5e:	28 01       	movw	r4, r16
     c60:	f2 e0       	ldi	r31, 0x02	; 2
     c62:	4f 0e       	add	r4, r31
     c64:	51 1c       	adc	r5, r1
     c66:	f8 01       	movw	r30, r16
     c68:	a0 80       	ld	r10, Z
     c6a:	b1 80       	ldd	r11, Z+1	; 0x01
     c6c:	36 fe       	sbrs	r3, 6
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <vfprintf+0x146>
     c70:	69 2d       	mov	r22, r9
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <vfprintf+0x14a>
     c76:	6f ef       	ldi	r22, 0xFF	; 255
     c78:	7f ef       	ldi	r23, 0xFF	; 255
     c7a:	c5 01       	movw	r24, r10
     c7c:	0e 94 84 07 	call	0xf08	; 0xf08 <strnlen>
     c80:	4c 01       	movw	r8, r24
     c82:	82 01       	movw	r16, r4
     c84:	f3 2d       	mov	r31, r3
     c86:	ff 77       	andi	r31, 0x7F	; 127
     c88:	3f 2e       	mov	r3, r31
     c8a:	16 c0       	rjmp	.+44     	; 0xcb8 <vfprintf+0x188>
     c8c:	28 01       	movw	r4, r16
     c8e:	22 e0       	ldi	r18, 0x02	; 2
     c90:	42 0e       	add	r4, r18
     c92:	51 1c       	adc	r5, r1
     c94:	f8 01       	movw	r30, r16
     c96:	a0 80       	ld	r10, Z
     c98:	b1 80       	ldd	r11, Z+1	; 0x01
     c9a:	36 fe       	sbrs	r3, 6
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <vfprintf+0x174>
     c9e:	69 2d       	mov	r22, r9
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <vfprintf+0x178>
     ca4:	6f ef       	ldi	r22, 0xFF	; 255
     ca6:	7f ef       	ldi	r23, 0xFF	; 255
     ca8:	c5 01       	movw	r24, r10
     caa:	0e 94 79 07 	call	0xef2	; 0xef2 <strnlen_P>
     cae:	4c 01       	movw	r8, r24
     cb0:	f3 2d       	mov	r31, r3
     cb2:	f0 68       	ori	r31, 0x80	; 128
     cb4:	3f 2e       	mov	r3, r31
     cb6:	82 01       	movw	r16, r4
     cb8:	33 fc       	sbrc	r3, 3
     cba:	1b c0       	rjmp	.+54     	; 0xcf2 <vfprintf+0x1c2>
     cbc:	82 2d       	mov	r24, r2
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	88 16       	cp	r8, r24
     cc2:	99 06       	cpc	r9, r25
     cc4:	b0 f4       	brcc	.+44     	; 0xcf2 <vfprintf+0x1c2>
     cc6:	b6 01       	movw	r22, r12
     cc8:	80 e2       	ldi	r24, 0x20	; 32
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     cd0:	2a 94       	dec	r2
     cd2:	f4 cf       	rjmp	.-24     	; 0xcbc <vfprintf+0x18c>
     cd4:	f5 01       	movw	r30, r10
     cd6:	37 fc       	sbrc	r3, 7
     cd8:	85 91       	lpm	r24, Z+
     cda:	37 fe       	sbrs	r3, 7
     cdc:	81 91       	ld	r24, Z+
     cde:	5f 01       	movw	r10, r30
     ce0:	b6 01       	movw	r22, r12
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     ce8:	21 10       	cpse	r2, r1
     cea:	2a 94       	dec	r2
     cec:	21 e0       	ldi	r18, 0x01	; 1
     cee:	82 1a       	sub	r8, r18
     cf0:	91 08       	sbc	r9, r1
     cf2:	81 14       	cp	r8, r1
     cf4:	91 04       	cpc	r9, r1
     cf6:	71 f7       	brne	.-36     	; 0xcd4 <vfprintf+0x1a4>
     cf8:	e8 c0       	rjmp	.+464    	; 0xeca <vfprintf+0x39a>
     cfa:	84 36       	cpi	r24, 0x64	; 100
     cfc:	11 f0       	breq	.+4      	; 0xd02 <vfprintf+0x1d2>
     cfe:	89 36       	cpi	r24, 0x69	; 105
     d00:	41 f5       	brne	.+80     	; 0xd52 <vfprintf+0x222>
     d02:	f8 01       	movw	r30, r16
     d04:	37 fe       	sbrs	r3, 7
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <vfprintf+0x1e6>
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	0c 5f       	subi	r16, 0xFC	; 252
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	08 c0       	rjmp	.+16     	; 0xd26 <vfprintf+0x1f6>
     d16:	60 81       	ld	r22, Z
     d18:	71 81       	ldd	r23, Z+1	; 0x01
     d1a:	07 2e       	mov	r0, r23
     d1c:	00 0c       	add	r0, r0
     d1e:	88 0b       	sbc	r24, r24
     d20:	99 0b       	sbc	r25, r25
     d22:	0e 5f       	subi	r16, 0xFE	; 254
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	f3 2d       	mov	r31, r3
     d28:	ff 76       	andi	r31, 0x6F	; 111
     d2a:	3f 2e       	mov	r3, r31
     d2c:	97 ff       	sbrs	r25, 7
     d2e:	09 c0       	rjmp	.+18     	; 0xd42 <vfprintf+0x212>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	f0 68       	ori	r31, 0x80	; 128
     d40:	3f 2e       	mov	r3, r31
     d42:	2a e0       	ldi	r18, 0x0A	; 10
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	a3 01       	movw	r20, r6
     d48:	0e 94 cb 07 	call	0xf96	; 0xf96 <__ultoa_invert>
     d4c:	88 2e       	mov	r8, r24
     d4e:	86 18       	sub	r8, r6
     d50:	45 c0       	rjmp	.+138    	; 0xddc <vfprintf+0x2ac>
     d52:	85 37       	cpi	r24, 0x75	; 117
     d54:	31 f4       	brne	.+12     	; 0xd62 <vfprintf+0x232>
     d56:	23 2d       	mov	r18, r3
     d58:	2f 7e       	andi	r18, 0xEF	; 239
     d5a:	b2 2e       	mov	r11, r18
     d5c:	2a e0       	ldi	r18, 0x0A	; 10
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	25 c0       	rjmp	.+74     	; 0xdac <vfprintf+0x27c>
     d62:	93 2d       	mov	r25, r3
     d64:	99 7f       	andi	r25, 0xF9	; 249
     d66:	b9 2e       	mov	r11, r25
     d68:	8f 36       	cpi	r24, 0x6F	; 111
     d6a:	c1 f0       	breq	.+48     	; 0xd9c <vfprintf+0x26c>
     d6c:	18 f4       	brcc	.+6      	; 0xd74 <vfprintf+0x244>
     d6e:	88 35       	cpi	r24, 0x58	; 88
     d70:	79 f0       	breq	.+30     	; 0xd90 <vfprintf+0x260>
     d72:	b5 c0       	rjmp	.+362    	; 0xede <vfprintf+0x3ae>
     d74:	80 37       	cpi	r24, 0x70	; 112
     d76:	19 f0       	breq	.+6      	; 0xd7e <vfprintf+0x24e>
     d78:	88 37       	cpi	r24, 0x78	; 120
     d7a:	21 f0       	breq	.+8      	; 0xd84 <vfprintf+0x254>
     d7c:	b0 c0       	rjmp	.+352    	; 0xede <vfprintf+0x3ae>
     d7e:	e9 2f       	mov	r30, r25
     d80:	e0 61       	ori	r30, 0x10	; 16
     d82:	be 2e       	mov	r11, r30
     d84:	b4 fe       	sbrs	r11, 4
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <vfprintf+0x272>
     d88:	fb 2d       	mov	r31, r11
     d8a:	f4 60       	ori	r31, 0x04	; 4
     d8c:	bf 2e       	mov	r11, r31
     d8e:	09 c0       	rjmp	.+18     	; 0xda2 <vfprintf+0x272>
     d90:	34 fe       	sbrs	r3, 4
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <vfprintf+0x278>
     d94:	29 2f       	mov	r18, r25
     d96:	26 60       	ori	r18, 0x06	; 6
     d98:	b2 2e       	mov	r11, r18
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <vfprintf+0x278>
     d9c:	28 e0       	ldi	r18, 0x08	; 8
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	05 c0       	rjmp	.+10     	; 0xdac <vfprintf+0x27c>
     da2:	20 e1       	ldi	r18, 0x10	; 16
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <vfprintf+0x27c>
     da8:	20 e1       	ldi	r18, 0x10	; 16
     daa:	32 e0       	ldi	r19, 0x02	; 2
     dac:	f8 01       	movw	r30, r16
     dae:	b7 fe       	sbrs	r11, 7
     db0:	07 c0       	rjmp	.+14     	; 0xdc0 <vfprintf+0x290>
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	0c 5f       	subi	r16, 0xFC	; 252
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	06 c0       	rjmp	.+12     	; 0xdcc <vfprintf+0x29c>
     dc0:	60 81       	ld	r22, Z
     dc2:	71 81       	ldd	r23, Z+1	; 0x01
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 5f       	subi	r16, 0xFE	; 254
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	a3 01       	movw	r20, r6
     dce:	0e 94 cb 07 	call	0xf96	; 0xf96 <__ultoa_invert>
     dd2:	88 2e       	mov	r8, r24
     dd4:	86 18       	sub	r8, r6
     dd6:	fb 2d       	mov	r31, r11
     dd8:	ff 77       	andi	r31, 0x7F	; 127
     dda:	3f 2e       	mov	r3, r31
     ddc:	36 fe       	sbrs	r3, 6
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <vfprintf+0x2ca>
     de0:	23 2d       	mov	r18, r3
     de2:	2e 7f       	andi	r18, 0xFE	; 254
     de4:	a2 2e       	mov	r10, r18
     de6:	89 14       	cp	r8, r9
     de8:	58 f4       	brcc	.+22     	; 0xe00 <vfprintf+0x2d0>
     dea:	34 fe       	sbrs	r3, 4
     dec:	0b c0       	rjmp	.+22     	; 0xe04 <vfprintf+0x2d4>
     dee:	32 fc       	sbrc	r3, 2
     df0:	09 c0       	rjmp	.+18     	; 0xe04 <vfprintf+0x2d4>
     df2:	83 2d       	mov	r24, r3
     df4:	8e 7e       	andi	r24, 0xEE	; 238
     df6:	a8 2e       	mov	r10, r24
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <vfprintf+0x2d4>
     dfa:	b8 2c       	mov	r11, r8
     dfc:	a3 2c       	mov	r10, r3
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <vfprintf+0x2d6>
     e00:	b8 2c       	mov	r11, r8
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <vfprintf+0x2d6>
     e04:	b9 2c       	mov	r11, r9
     e06:	a4 fe       	sbrs	r10, 4
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <vfprintf+0x2f8>
     e0a:	fe 01       	movw	r30, r28
     e0c:	e8 0d       	add	r30, r8
     e0e:	f1 1d       	adc	r31, r1
     e10:	80 81       	ld	r24, Z
     e12:	80 33       	cpi	r24, 0x30	; 48
     e14:	21 f4       	brne	.+8      	; 0xe1e <vfprintf+0x2ee>
     e16:	9a 2d       	mov	r25, r10
     e18:	99 7e       	andi	r25, 0xE9	; 233
     e1a:	a9 2e       	mov	r10, r25
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <vfprintf+0x300>
     e1e:	a2 fe       	sbrs	r10, 2
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <vfprintf+0x2fe>
     e22:	b3 94       	inc	r11
     e24:	b3 94       	inc	r11
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <vfprintf+0x300>
     e28:	8a 2d       	mov	r24, r10
     e2a:	86 78       	andi	r24, 0x86	; 134
     e2c:	09 f0       	breq	.+2      	; 0xe30 <vfprintf+0x300>
     e2e:	b3 94       	inc	r11
     e30:	a3 fc       	sbrc	r10, 3
     e32:	11 c0       	rjmp	.+34     	; 0xe56 <vfprintf+0x326>
     e34:	a0 fe       	sbrs	r10, 0
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <vfprintf+0x314>
     e38:	b2 14       	cp	r11, r2
     e3a:	88 f4       	brcc	.+34     	; 0xe5e <vfprintf+0x32e>
     e3c:	28 0c       	add	r2, r8
     e3e:	92 2c       	mov	r9, r2
     e40:	9b 18       	sub	r9, r11
     e42:	0e c0       	rjmp	.+28     	; 0xe60 <vfprintf+0x330>
     e44:	b2 14       	cp	r11, r2
     e46:	60 f4       	brcc	.+24     	; 0xe60 <vfprintf+0x330>
     e48:	b6 01       	movw	r22, r12
     e4a:	80 e2       	ldi	r24, 0x20	; 32
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     e52:	b3 94       	inc	r11
     e54:	f7 cf       	rjmp	.-18     	; 0xe44 <vfprintf+0x314>
     e56:	b2 14       	cp	r11, r2
     e58:	18 f4       	brcc	.+6      	; 0xe60 <vfprintf+0x330>
     e5a:	2b 18       	sub	r2, r11
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <vfprintf+0x332>
     e5e:	98 2c       	mov	r9, r8
     e60:	21 2c       	mov	r2, r1
     e62:	a4 fe       	sbrs	r10, 4
     e64:	10 c0       	rjmp	.+32     	; 0xe86 <vfprintf+0x356>
     e66:	b6 01       	movw	r22, r12
     e68:	80 e3       	ldi	r24, 0x30	; 48
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     e70:	a2 fe       	sbrs	r10, 2
     e72:	17 c0       	rjmp	.+46     	; 0xea2 <vfprintf+0x372>
     e74:	a1 fc       	sbrc	r10, 1
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <vfprintf+0x34e>
     e78:	88 e7       	ldi	r24, 0x78	; 120
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <vfprintf+0x352>
     e7e:	88 e5       	ldi	r24, 0x58	; 88
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	b6 01       	movw	r22, r12
     e84:	0c c0       	rjmp	.+24     	; 0xe9e <vfprintf+0x36e>
     e86:	8a 2d       	mov	r24, r10
     e88:	86 78       	andi	r24, 0x86	; 134
     e8a:	59 f0       	breq	.+22     	; 0xea2 <vfprintf+0x372>
     e8c:	a1 fe       	sbrs	r10, 1
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <vfprintf+0x364>
     e90:	8b e2       	ldi	r24, 0x2B	; 43
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <vfprintf+0x366>
     e94:	80 e2       	ldi	r24, 0x20	; 32
     e96:	a7 fc       	sbrc	r10, 7
     e98:	8d e2       	ldi	r24, 0x2D	; 45
     e9a:	b6 01       	movw	r22, r12
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     ea2:	89 14       	cp	r8, r9
     ea4:	38 f4       	brcc	.+14     	; 0xeb4 <vfprintf+0x384>
     ea6:	b6 01       	movw	r22, r12
     ea8:	80 e3       	ldi	r24, 0x30	; 48
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     eb0:	9a 94       	dec	r9
     eb2:	f7 cf       	rjmp	.-18     	; 0xea2 <vfprintf+0x372>
     eb4:	8a 94       	dec	r8
     eb6:	f3 01       	movw	r30, r6
     eb8:	e8 0d       	add	r30, r8
     eba:	f1 1d       	adc	r31, r1
     ebc:	80 81       	ld	r24, Z
     ebe:	b6 01       	movw	r22, r12
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     ec6:	81 10       	cpse	r8, r1
     ec8:	f5 cf       	rjmp	.-22     	; 0xeb4 <vfprintf+0x384>
     eca:	22 20       	and	r2, r2
     ecc:	09 f4       	brne	.+2      	; 0xed0 <vfprintf+0x3a0>
     ece:	42 ce       	rjmp	.-892    	; 0xb54 <vfprintf+0x24>
     ed0:	b6 01       	movw	r22, r12
     ed2:	80 e2       	ldi	r24, 0x20	; 32
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 8f 07 	call	0xf1e	; 0xf1e <fputc>
     eda:	2a 94       	dec	r2
     edc:	f6 cf       	rjmp	.-20     	; 0xeca <vfprintf+0x39a>
     ede:	f6 01       	movw	r30, r12
     ee0:	86 81       	ldd	r24, Z+6	; 0x06
     ee2:	97 81       	ldd	r25, Z+7	; 0x07
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <vfprintf+0x3ba>
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	9f ef       	ldi	r25, 0xFF	; 255
     eea:	2b 96       	adiw	r28, 0x0b	; 11
     eec:	e2 e1       	ldi	r30, 0x12	; 18
     eee:	0c 94 45 08 	jmp	0x108a	; 0x108a <__epilogue_restores__>

00000ef2 <strnlen_P>:
     ef2:	fc 01       	movw	r30, r24
     ef4:	05 90       	lpm	r0, Z+
     ef6:	61 50       	subi	r22, 0x01	; 1
     ef8:	70 40       	sbci	r23, 0x00	; 0
     efa:	01 10       	cpse	r0, r1
     efc:	d8 f7       	brcc	.-10     	; 0xef4 <strnlen_P+0x2>
     efe:	80 95       	com	r24
     f00:	90 95       	com	r25
     f02:	8e 0f       	add	r24, r30
     f04:	9f 1f       	adc	r25, r31
     f06:	08 95       	ret

00000f08 <strnlen>:
     f08:	fc 01       	movw	r30, r24
     f0a:	61 50       	subi	r22, 0x01	; 1
     f0c:	70 40       	sbci	r23, 0x00	; 0
     f0e:	01 90       	ld	r0, Z+
     f10:	01 10       	cpse	r0, r1
     f12:	d8 f7       	brcc	.-10     	; 0xf0a <strnlen+0x2>
     f14:	80 95       	com	r24
     f16:	90 95       	com	r25
     f18:	8e 0f       	add	r24, r30
     f1a:	9f 1f       	adc	r25, r31
     f1c:	08 95       	ret

00000f1e <fputc>:
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	fb 01       	movw	r30, r22
     f28:	23 81       	ldd	r18, Z+3	; 0x03
     f2a:	21 fd       	sbrc	r18, 1
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <fputc+0x16>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f ef       	ldi	r25, 0xFF	; 255
     f32:	2c c0       	rjmp	.+88     	; 0xf8c <fputc+0x6e>
     f34:	22 ff       	sbrs	r18, 2
     f36:	16 c0       	rjmp	.+44     	; 0xf64 <fputc+0x46>
     f38:	46 81       	ldd	r20, Z+6	; 0x06
     f3a:	57 81       	ldd	r21, Z+7	; 0x07
     f3c:	24 81       	ldd	r18, Z+4	; 0x04
     f3e:	35 81       	ldd	r19, Z+5	; 0x05
     f40:	42 17       	cp	r20, r18
     f42:	53 07       	cpc	r21, r19
     f44:	44 f4       	brge	.+16     	; 0xf56 <fputc+0x38>
     f46:	a0 81       	ld	r26, Z
     f48:	b1 81       	ldd	r27, Z+1	; 0x01
     f4a:	9d 01       	movw	r18, r26
     f4c:	2f 5f       	subi	r18, 0xFF	; 255
     f4e:	3f 4f       	sbci	r19, 0xFF	; 255
     f50:	31 83       	std	Z+1, r19	; 0x01
     f52:	20 83       	st	Z, r18
     f54:	8c 93       	st	X, r24
     f56:	26 81       	ldd	r18, Z+6	; 0x06
     f58:	37 81       	ldd	r19, Z+7	; 0x07
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	37 83       	std	Z+7, r19	; 0x07
     f60:	26 83       	std	Z+6, r18	; 0x06
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <fputc+0x6e>
     f64:	8b 01       	movw	r16, r22
     f66:	ec 01       	movw	r28, r24
     f68:	fb 01       	movw	r30, r22
     f6a:	00 84       	ldd	r0, Z+8	; 0x08
     f6c:	f1 85       	ldd	r31, Z+9	; 0x09
     f6e:	e0 2d       	mov	r30, r0
     f70:	09 95       	icall
     f72:	89 2b       	or	r24, r25
     f74:	e1 f6       	brne	.-72     	; 0xf2e <fputc+0x10>
     f76:	d8 01       	movw	r26, r16
     f78:	16 96       	adiw	r26, 0x06	; 6
     f7a:	8d 91       	ld	r24, X+
     f7c:	9c 91       	ld	r25, X
     f7e:	17 97       	sbiw	r26, 0x07	; 7
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	17 96       	adiw	r26, 0x07	; 7
     f84:	9c 93       	st	X, r25
     f86:	8e 93       	st	-X, r24
     f88:	16 97       	sbiw	r26, 0x06	; 6
     f8a:	ce 01       	movw	r24, r28
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <__ultoa_invert>:
     f96:	fa 01       	movw	r30, r20
     f98:	aa 27       	eor	r26, r26
     f9a:	28 30       	cpi	r18, 0x08	; 8
     f9c:	51 f1       	breq	.+84     	; 0xff2 <__ultoa_invert+0x5c>
     f9e:	20 31       	cpi	r18, 0x10	; 16
     fa0:	81 f1       	breq	.+96     	; 0x1002 <__ultoa_invert+0x6c>
     fa2:	e8 94       	clt
     fa4:	6f 93       	push	r22
     fa6:	6e 7f       	andi	r22, 0xFE	; 254
     fa8:	6e 5f       	subi	r22, 0xFE	; 254
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	8f 4f       	sbci	r24, 0xFF	; 255
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	af 4f       	sbci	r26, 0xFF	; 255
     fb2:	b1 e0       	ldi	r27, 0x01	; 1
     fb4:	3e d0       	rcall	.+124    	; 0x1032 <__ultoa_invert+0x9c>
     fb6:	b4 e0       	ldi	r27, 0x04	; 4
     fb8:	3c d0       	rcall	.+120    	; 0x1032 <__ultoa_invert+0x9c>
     fba:	67 0f       	add	r22, r23
     fbc:	78 1f       	adc	r23, r24
     fbe:	89 1f       	adc	r24, r25
     fc0:	9a 1f       	adc	r25, r26
     fc2:	a1 1d       	adc	r26, r1
     fc4:	68 0f       	add	r22, r24
     fc6:	79 1f       	adc	r23, r25
     fc8:	8a 1f       	adc	r24, r26
     fca:	91 1d       	adc	r25, r1
     fcc:	a1 1d       	adc	r26, r1
     fce:	6a 0f       	add	r22, r26
     fd0:	71 1d       	adc	r23, r1
     fd2:	81 1d       	adc	r24, r1
     fd4:	91 1d       	adc	r25, r1
     fd6:	a1 1d       	adc	r26, r1
     fd8:	20 d0       	rcall	.+64     	; 0x101a <__ultoa_invert+0x84>
     fda:	09 f4       	brne	.+2      	; 0xfde <__ultoa_invert+0x48>
     fdc:	68 94       	set
     fde:	3f 91       	pop	r19
     fe0:	2a e0       	ldi	r18, 0x0A	; 10
     fe2:	26 9f       	mul	r18, r22
     fe4:	11 24       	eor	r1, r1
     fe6:	30 19       	sub	r19, r0
     fe8:	30 5d       	subi	r19, 0xD0	; 208
     fea:	31 93       	st	Z+, r19
     fec:	de f6       	brtc	.-74     	; 0xfa4 <__ultoa_invert+0xe>
     fee:	cf 01       	movw	r24, r30
     ff0:	08 95       	ret
     ff2:	46 2f       	mov	r20, r22
     ff4:	47 70       	andi	r20, 0x07	; 7
     ff6:	40 5d       	subi	r20, 0xD0	; 208
     ff8:	41 93       	st	Z+, r20
     ffa:	b3 e0       	ldi	r27, 0x03	; 3
     ffc:	0f d0       	rcall	.+30     	; 0x101c <__ultoa_invert+0x86>
     ffe:	c9 f7       	brne	.-14     	; 0xff2 <__ultoa_invert+0x5c>
    1000:	f6 cf       	rjmp	.-20     	; 0xfee <__ultoa_invert+0x58>
    1002:	46 2f       	mov	r20, r22
    1004:	4f 70       	andi	r20, 0x0F	; 15
    1006:	40 5d       	subi	r20, 0xD0	; 208
    1008:	4a 33       	cpi	r20, 0x3A	; 58
    100a:	18 f0       	brcs	.+6      	; 0x1012 <__ultoa_invert+0x7c>
    100c:	49 5d       	subi	r20, 0xD9	; 217
    100e:	31 fd       	sbrc	r19, 1
    1010:	40 52       	subi	r20, 0x20	; 32
    1012:	41 93       	st	Z+, r20
    1014:	02 d0       	rcall	.+4      	; 0x101a <__ultoa_invert+0x84>
    1016:	a9 f7       	brne	.-22     	; 0x1002 <__ultoa_invert+0x6c>
    1018:	ea cf       	rjmp	.-44     	; 0xfee <__ultoa_invert+0x58>
    101a:	b4 e0       	ldi	r27, 0x04	; 4
    101c:	a6 95       	lsr	r26
    101e:	97 95       	ror	r25
    1020:	87 95       	ror	r24
    1022:	77 95       	ror	r23
    1024:	67 95       	ror	r22
    1026:	ba 95       	dec	r27
    1028:	c9 f7       	brne	.-14     	; 0x101c <__ultoa_invert+0x86>
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	61 05       	cpc	r22, r1
    102e:	71 05       	cpc	r23, r1
    1030:	08 95       	ret
    1032:	9b 01       	movw	r18, r22
    1034:	ac 01       	movw	r20, r24
    1036:	0a 2e       	mov	r0, r26
    1038:	06 94       	lsr	r0
    103a:	57 95       	ror	r21
    103c:	47 95       	ror	r20
    103e:	37 95       	ror	r19
    1040:	27 95       	ror	r18
    1042:	ba 95       	dec	r27
    1044:	c9 f7       	brne	.-14     	; 0x1038 <__ultoa_invert+0xa2>
    1046:	62 0f       	add	r22, r18
    1048:	73 1f       	adc	r23, r19
    104a:	84 1f       	adc	r24, r20
    104c:	95 1f       	adc	r25, r21
    104e:	a0 1d       	adc	r26, r0
    1050:	08 95       	ret

00001052 <__prologue_saves__>:
    1052:	2f 92       	push	r2
    1054:	3f 92       	push	r3
    1056:	4f 92       	push	r4
    1058:	5f 92       	push	r5
    105a:	6f 92       	push	r6
    105c:	7f 92       	push	r7
    105e:	8f 92       	push	r8
    1060:	9f 92       	push	r9
    1062:	af 92       	push	r10
    1064:	bf 92       	push	r11
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	ca 1b       	sub	r28, r26
    107c:	db 0b       	sbc	r29, r27
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	09 94       	ijmp

0000108a <__epilogue_restores__>:
    108a:	2a 88       	ldd	r2, Y+18	; 0x12
    108c:	39 88       	ldd	r3, Y+17	; 0x11
    108e:	48 88       	ldd	r4, Y+16	; 0x10
    1090:	5f 84       	ldd	r5, Y+15	; 0x0f
    1092:	6e 84       	ldd	r6, Y+14	; 0x0e
    1094:	7d 84       	ldd	r7, Y+13	; 0x0d
    1096:	8c 84       	ldd	r8, Y+12	; 0x0c
    1098:	9b 84       	ldd	r9, Y+11	; 0x0b
    109a:	aa 84       	ldd	r10, Y+10	; 0x0a
    109c:	b9 84       	ldd	r11, Y+9	; 0x09
    109e:	c8 84       	ldd	r12, Y+8	; 0x08
    10a0:	df 80       	ldd	r13, Y+7	; 0x07
    10a2:	ee 80       	ldd	r14, Y+6	; 0x06
    10a4:	fd 80       	ldd	r15, Y+5	; 0x05
    10a6:	0c 81       	ldd	r16, Y+4	; 0x04
    10a8:	1b 81       	ldd	r17, Y+3	; 0x03
    10aa:	aa 81       	ldd	r26, Y+2	; 0x02
    10ac:	b9 81       	ldd	r27, Y+1	; 0x01
    10ae:	ce 0f       	add	r28, r30
    10b0:	d1 1d       	adc	r29, r1
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	ed 01       	movw	r28, r26
    10be:	08 95       	ret

000010c0 <_exit>:
    10c0:	f8 94       	cli

000010c2 <__stop_program>:
    10c2:	ff cf       	rjmp	.-2      	; 0x10c2 <__stop_program>
